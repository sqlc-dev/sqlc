// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package booktest

import (
	"context"
	"time"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const booksByTags = `-- name: BooksByTags :many
SELECT 
  book_id,
  title,
  name,
  isbn,
  tag
FROM books
LEFT JOIN authors ON books.author_id = authors.author_id
WHERE tag IN $tags
`

type BooksByTagsRow struct {
	BookID int32
	Title  string
	Name   *string
	Isbn   string
	Tag    string
}

func (q *Queries) BooksByTags(ctx context.Context, tags []string, opts ...query.ExecuteOption) ([]BooksByTagsRow, error) {
	parameters := ydb.ParamsBuilder()
	var list = parameters.Param("$tags").BeginList()
	for _, param := range tags {
		list = list.Add().Text(param)
	}
	parameters = list.EndList()
	result, err := q.db.QueryResultSet(ctx, booksByTags,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []BooksByTagsRow
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i BooksByTagsRow
		if err := row.Scan(
			&i.BookID,
			&i.Title,
			&i.Name,
			&i.Isbn,
			&i.Tag,
		); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const booksByTitleYear = `-- name: BooksByTitleYear :many
SELECT book_id, author_id, isbn, book_type, title, year, available, tag FROM books
WHERE title = $title AND year = $year
`

type BooksByTitleYearParams struct {
	Title string
	Year  int32
}

func (q *Queries) BooksByTitleYear(ctx context.Context, arg BooksByTitleYearParams, opts ...query.ExecuteOption) ([]Book, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$title").Text(arg.Title)
	parameters = parameters.Param("$year").Int32(arg.Year)
	result, err := q.db.QueryResultSet(ctx, booksByTitleYear,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Book
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Book
		if err := row.Scan(
			&i.BookID,
			&i.AuthorID,
			&i.Isbn,
			&i.BookType,
			&i.Title,
			&i.Year,
			&i.Available,
			&i.Tag,
		); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (name) 
VALUES ($name)
RETURNING author_id, name
`

func (q *Queries) CreateAuthor(ctx context.Context, name string, opts ...query.ExecuteOption) (Author, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$name").Text(name)
	row, err := q.db.QueryRow(ctx, createAuthor,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i Author
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&i.AuthorID, &i.Name)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}

const createBook = `-- name: CreateBook :one
INSERT INTO books (
    author_id,
    isbn,
    book_type,
    title,
    year,
    available,
    tag
) VALUES (
    $author_id,
    $isbn,
    $book_type,
    $title,
    $year,
    $available,
    $tag
)
RETURNING book_id, author_id, isbn, book_type, title, year, available, tag
`

type CreateBookParams struct {
	AuthorID  int32
	Isbn      string
	BookType  string
	Title     string
	Year      int32
	Available time.Time
	Tag       string
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams, opts ...query.ExecuteOption) (Book, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$author_id").Int32(arg.AuthorID)
	parameters = parameters.Param("$isbn").Text(arg.Isbn)
	parameters = parameters.Param("$book_type").Text(arg.BookType)
	parameters = parameters.Param("$title").Text(arg.Title)
	parameters = parameters.Param("$year").Int32(arg.Year)
	parameters = parameters.Param("$available").Timestamp(arg.Available)
	parameters = parameters.Param("$tag").Text(arg.Tag)
	row, err := q.db.QueryRow(ctx, createBook,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i Book
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(
		&i.BookID,
		&i.AuthorID,
		&i.Isbn,
		&i.BookType,
		&i.Title,
		&i.Year,
		&i.Available,
		&i.Tag,
	)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE book_id = $book_id
`

func (q *Queries) DeleteBook(ctx context.Context, bookID int32, opts ...query.ExecuteOption) error {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$book_id").Int32(bookID)
	err := q.db.Exec(ctx, deleteBook,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return xerrors.WithStackTrace(err)
	}
	return nil
}

const getAuthor = `-- name: GetAuthor :one
SELECT author_id, name FROM authors
WHERE author_id = $author_id LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, authorID int32, opts ...query.ExecuteOption) (Author, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$author_id").Int32(authorID)
	row, err := q.db.QueryRow(ctx, getAuthor,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i Author
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&i.AuthorID, &i.Name)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}

const getBook = `-- name: GetBook :one
SELECT book_id, author_id, isbn, book_type, title, year, available, tag FROM books
WHERE book_id = $book_id LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, bookID int32, opts ...query.ExecuteOption) (Book, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$book_id").Int32(bookID)
	row, err := q.db.QueryRow(ctx, getBook,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i Book
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(
		&i.BookID,
		&i.AuthorID,
		&i.Isbn,
		&i.BookType,
		&i.Title,
		&i.Year,
		&i.Available,
		&i.Tag,
	)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books
SET title = $title, tag = $tag
WHERE book_id = $book_id
`

type UpdateBookParams struct {
	Title  string
	Tag    string
	BookID int32
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams, opts ...query.ExecuteOption) error {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$title").Text(arg.Title)
	parameters = parameters.Param("$tag").Text(arg.Tag)
	parameters = parameters.Param("$book_id").Int32(arg.BookID)
	err := q.db.Exec(ctx, updateBook,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return xerrors.WithStackTrace(err)
	}
	return nil
}

const updateBookISBN = `-- name: UpdateBookISBN :exec
UPDATE books
SET title = $title, tag = $tag, isbn = $isbn
WHERE book_id = $book_id
`

type UpdateBookISBNParams struct {
	Title  string
	Tag    string
	Isbn   string
	BookID int32
}

func (q *Queries) UpdateBookISBN(ctx context.Context, arg UpdateBookISBNParams, opts ...query.ExecuteOption) error {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$title").Text(arg.Title)
	parameters = parameters.Param("$tag").Text(arg.Tag)
	parameters = parameters.Param("$isbn").Text(arg.Isbn)
	parameters = parameters.Param("$book_id").Int32(arg.BookID)
	err := q.db.Exec(ctx, updateBookISBN,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return xerrors.WithStackTrace(err)
	}
	return nil
}
