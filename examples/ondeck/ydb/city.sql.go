// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: city.sql

package ondeck

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const createCity = `-- name: CreateCity :one
INSERT INTO city (
    name,
    slug
) VALUES (
    $name,
    $slug
) RETURNING slug, name
`

type CreateCityParams struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

// Create a new city. The slug must be unique.
// This is the second line of the comment
// This is the third line

func (q *Queries) CreateCity(ctx context.Context, arg CreateCityParams, opts ...query.ExecuteOption) (City, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$name").Text(arg.Name)
	parameters = parameters.Param("$slug").Text(arg.Slug)
	row, err := q.db.QueryRow(ctx, createCity,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i City
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&i.Slug, &i.Name)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}

const getCity = `-- name: GetCity :one
SELECT slug, name
FROM city
WHERE slug = $slug
`

func (q *Queries) GetCity(ctx context.Context, slug string, opts ...query.ExecuteOption) (City, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$slug").Text(slug)
	row, err := q.db.QueryRow(ctx, getCity,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i City
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&i.Slug, &i.Name)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}

const listCities = `-- name: ListCities :many
SELECT slug, name
FROM city
ORDER BY name
`

func (q *Queries) ListCities(ctx context.Context, opts ...query.ExecuteOption) ([]City, error) {
	result, err := q.db.QueryResultSet(ctx, listCities, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []City
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i City
		if err := row.Scan(&i.Slug, &i.Name); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const updateCityName = `-- name: UpdateCityName :exec
UPDATE city
SET name = $name
WHERE slug = $slug
`

type UpdateCityNameParams struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) UpdateCityName(ctx context.Context, arg UpdateCityNameParams, opts ...query.ExecuteOption) error {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$name").Text(arg.Name)
	parameters = parameters.Param("$slug").Text(arg.Slug)
	err := q.db.Exec(ctx, updateCityName,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return xerrors.WithStackTrace(err)
	}
	return nil
}
