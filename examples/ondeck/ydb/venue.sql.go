// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: venue.sql

package ondeck

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const createVenue = `-- name: CreateVenue :one
INSERT INTO venue (
    slug,
    name,
    city,
    created_at,
    spotify_playlist,
    status,
    tags
) VALUES (
    $slug,
    $name,
    $city,
    CurrentUtcTimestamp(),
    $spotify_playlist,
    $status,
    $tags
) RETURNING id
`

type CreateVenueParams struct {
	Slug            string  `json:"slug"`
	Name            string  `json:"name"`
	City            string  `json:"city"`
	SpotifyPlaylist string  `json:"spotify_playlist"`
	Status          string  `json:"status"`
	Tags            *string `json:"tags"`
}

func (q *Queries) CreateVenue(ctx context.Context, arg CreateVenueParams, opts ...query.ExecuteOption) (int32, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$slug").Text(arg.Slug)
	parameters = parameters.Param("$name").Text(arg.Name)
	parameters = parameters.Param("$city").Text(arg.City)
	parameters = parameters.Param("$spotify_playlist").Text(arg.SpotifyPlaylist)
	parameters = parameters.Param("$status").Text(arg.Status)
	parameters = parameters.Param("$tags").BeginOptional().Text(arg.Tags).EndOptional()
	row, err := q.db.QueryRow(ctx, createVenue,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var id int32
	if err != nil {
		return id, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&id)
	if err != nil {
		return id, xerrors.WithStackTrace(err)
	}
	return id, nil
}

const deleteVenue = `-- name: DeleteVenue :exec
DELETE FROM venue
WHERE slug = $slug AND slug = $slug
`

func (q *Queries) DeleteVenue(ctx context.Context, slug string, opts ...query.ExecuteOption) error {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$slug").Text(slug)
	err := q.db.Exec(ctx, deleteVenue,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return xerrors.WithStackTrace(err)
	}
	return nil
}

const getVenue = `-- name: GetVenue :one
SELECT id, status, slug, name, city, spotify_playlist, songkick_id, tags, created_at
FROM venue
WHERE slug = $slug AND city = $city
`

type GetVenueParams struct {
	Slug string `json:"slug"`
	City string `json:"city"`
}

func (q *Queries) GetVenue(ctx context.Context, arg GetVenueParams, opts ...query.ExecuteOption) (Venue, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$slug").Text(arg.Slug)
	parameters = parameters.Param("$city").Text(arg.City)
	row, err := q.db.QueryRow(ctx, getVenue,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i Venue
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(
		&i.ID,
		&i.Status,
		&i.Slug,
		&i.Name,
		&i.City,
		&i.SpotifyPlaylist,
		&i.SongkickID,
		&i.Tags,
		&i.CreatedAt,
	)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}

const listVenues = `-- name: ListVenues :many
SELECT id, status, slug, name, city, spotify_playlist, songkick_id, tags, created_at
FROM venue
WHERE city = $city
ORDER BY name
`

func (q *Queries) ListVenues(ctx context.Context, city string, opts ...query.ExecuteOption) ([]Venue, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$city").Text(city)
	result, err := q.db.QueryResultSet(ctx, listVenues,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Venue
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Venue
		if err := row.Scan(
			&i.ID,
			&i.Status,
			&i.Slug,
			&i.Name,
			&i.City,
			&i.SpotifyPlaylist,
			&i.SongkickID,
			&i.Tags,
			&i.CreatedAt,
		); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const updateVenueName = `-- name: UpdateVenueName :one
UPDATE venue
SET name = $name
WHERE slug = $slug
RETURNING id
`

type UpdateVenueNameParams struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) UpdateVenueName(ctx context.Context, arg UpdateVenueNameParams, opts ...query.ExecuteOption) (int32, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$name").Text(arg.Name)
	parameters = parameters.Param("$slug").Text(arg.Slug)
	row, err := q.db.QueryRow(ctx, updateVenueName,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var id int32
	if err != nil {
		return id, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&id)
	if err != nil {
		return id, xerrors.WithStackTrace(err)
	}
	return id, nil
}

const venueCountByCity = `-- name: VenueCountByCity :many
SELECT
    city,
    count(*) as count
FROM venue
GROUP BY city
ORDER BY city
`

type VenueCountByCityRow struct {
	City  string `json:"city"`
	Count uint64 `json:"count"`
}

func (q *Queries) VenueCountByCity(ctx context.Context, opts ...query.ExecuteOption) ([]VenueCountByCityRow, error) {
	result, err := q.db.QueryResultSet(ctx, venueCountByCity, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []VenueCountByCityRow
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i VenueCountByCityRow
		if err := row.Scan(&i.City, &i.Count); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
