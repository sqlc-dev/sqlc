// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query-building.sql

package jets

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const countPilots = `-- name: CountPilots :one
SELECT COUNT(*) FROM pilots
`

func (q *Queries) CountPilots(ctx context.Context, opts ...query.ExecuteOption) (uint64, error) {
	row, err := q.db.QueryRow(ctx, countPilots, opts...)
	var count uint64
	if err != nil {
		return count, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&count)
	if err != nil {
		return count, xerrors.WithStackTrace(err)
	}
	return count, nil
}

const deletePilot = `-- name: DeletePilot :exec
DELETE FROM pilots WHERE id = $id
`

func (q *Queries) DeletePilot(ctx context.Context, id int32, opts ...query.ExecuteOption) error {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$id").Int32(id)
	err := q.db.Exec(ctx, deletePilot,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return xerrors.WithStackTrace(err)
	}
	return nil
}

const listPilots = `-- name: ListPilots :many
SELECT id, name FROM pilots LIMIT 5
`

func (q *Queries) ListPilots(ctx context.Context, opts ...query.ExecuteOption) ([]Pilot, error) {
	result, err := q.db.QueryResultSet(ctx, listPilots, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Pilot
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Pilot
		if err := row.Scan(&i.ID, &i.Name); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
