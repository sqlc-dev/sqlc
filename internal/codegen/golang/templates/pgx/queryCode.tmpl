{{define "queryCodePgx"}}
{{range .GoQueries}}
{{if $.OutputQuery .SourceName}}
{{if and (ne .Cmd ":copyfrom") (ne (hasPrefix .Cmd ":batch") true)}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}
{{end}}

{{if ne (hasPrefix .Cmd ":batch") true}}
{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}{{- range .OptionalParameters}}, {{.Name}} {{.Type}}{{- end}}) ({{.Ret.DefineType}}, error) {
	{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}{{- range .OptionalParameters}}, {{.Name}} {{.Type}}{{- end}}) ({{.Ret.DefineType}}, error) {
{{- end}}
{{- template "queryCodePgxExec" . }}
	{{- if or (ne .Arg.Pair .Ret.Pair) (ne .Arg.DefineType .Ret.DefineType) }}
	var {{.Ret.Name}} {{.Ret.Type}}
	{{- end}}
	err := row.Scan({{.Ret.Scan}})
	{{- if $.WrapErrors}}
	if err != nil {
		err = fmt.Errorf("query {{.MethodName}}: %w", err)
	}
	{{- end}}
	return {{.Ret.ReturnName}}, err
}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}{{- range .OptionalParameters}}, {{.Name}} {{.Type}}{{- end}}) ([]{{.Ret.DefineType}}, error) {
	{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}{{- range .OptionalParameters}}, {{.Name}} {{.Type}}{{- end}}) ([]{{.Ret.DefineType}}, error) {
{{- end}}
{{- template "queryCodePgxExec" . }}
	if err != nil {
		return nil, {{if $.WrapErrors}}fmt.Errorf("query {{.MethodName}}: %w", err){{else}}err{{end}}
	}
	defer rows.Close()
	{{- if $.EmitEmptySlices}}
	items := []{{.Ret.DefineType}}{}
	{{else}}
	var items []{{.Ret.DefineType}}
	{{end -}}
	for rows.Next() {
		var {{.Ret.Name}} {{.Ret.Type}}
		if err := rows.Scan({{.Ret.Scan}}); err != nil {
			return nil, {{if $.WrapErrors}}fmt.Errorf("query {{.MethodName}}: %w", err){{else}}err{{end}}
		}
		items = append(items, {{.Ret.ReturnName}})
	}
	if err := rows.Err(); err != nil {
		return nil, {{if $.WrapErrors}}fmt.Errorf("query {{.MethodName}}: %w", err){{else}}err{{end}}
	}
	return items, nil
}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}{{- range .OptionalParameters}}, {{.Name}} {{.Type}}{{- end}}) error {
	{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}{{- range .OptionalParameters}}, {{.Name}} {{.Type}}{{- end}}) error {
{{- end}}
{{- template "queryCodePgxExec" . }}
	{{- if $.WrapErrors }}
	if err != nil {
		return fmt.Errorf("query {{.MethodName}}: %w", err)
	}
	return nil
	{{- else }}
	return err
	{{- end }}
}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}{{- range .OptionalParameters}}, {{.Name}} {{.Type}}{{- end}}) (int64, error) {
	{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}{{- range .OptionalParameters}}, {{.Name}} {{.Type}}{{- end}}) (int64, error) {
{{- end}}
{{- template "queryCodePgxExec" . }}
	if err != nil {
		return 0, {{if $.WrapErrors}}fmt.Errorf("query {{.MethodName}}: %w", err){{else}}err{{end}}
	}
	return result.RowsAffected(), nil
}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}{{- range .OptionalParameters}}, {{.Name}} {{.Type}}{{- end}}) (pgconn.CommandTag, error) {
	{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}{{- range .OptionalParameters}}, {{.Name}} {{.Type}}{{- end}}) (pgconn.CommandTag, error) {
{{- end}}
{{- template "queryCodePgxExec" . }}
	{{- if $.WrapErrors}}
	if err != nil {
		err = fmt.Errorf("query {{.MethodName}}: %w", err)
	}
	return result, err
	{{- end}}
}
{{end}}

{{end}}
{{end}}
{{end}}

{{define "queryCodePgxExec"}}
{{ $db := "q.db" }}
{{- if $.EmitMethodsWithDBArgument }}
{{ $db = "db" }}
{{- end }}
var sqlBuilder strings.Builder
sqlBuilder.WriteString({{$.Q}}{{escape .SQL}}{{$.Q}})

var queryParams []interface{}
{{- range .Arg.Pairs }}
queryParams = append(queryParams, {{.Name}})
{{- end }}

{{- range $i, $block := .CurrentQueryOptionalBlocks }}
{{- $goParam := index $.OptionalParameters $i }}
if {{ $goParam.Name }} != nil {
    sqlBuilder.WriteString(" ")
    sqlBuilder.WriteString({{$.Q}}{{$block.SQLFragment}}{{$.Q}})
    queryParams = append(queryParams, {{ $goParam.Name }})
}
{{- end }}

{{- if eq .Cmd ":one"}}
row := {{$db}}.QueryRow(ctx, sqlBuilder.String(), queryParams...)
{{- else if eq .Cmd ":many"}}
rows, err := {{$db}}.Query(ctx, sqlBuilder.String(), queryParams...)
{{- else if eq .Cmd ":exec"}}
_, err := {{$db}}.Exec(ctx, sqlBuilder.String(), queryParams...)
{{- else if eq .Cmd ":execrows"}}
result, err := {{$db}}.Exec(ctx, sqlBuilder.String(), queryParams...)
{{- else if eq .Cmd ":execresult"}}
result, err := {{$db}}.Exec(ctx, sqlBuilder.String(), queryParams...)
{{- end}}
{{end}}
