{{define "dbCodeTemplatePgx"}}

type DBTX interface {
	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
	QueryRow(context.Context, string, ...interface{}) pgx.Row
{{- if .UsesCopyFrom }}
	CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error)
{{- end }}
{{- if .UsesBatch }}
	SendBatch(context.Context, *pgx.Batch) pgx.BatchResults
{{- end }}
}

type DB interface {
	DBTX
{{- if gt (len .CompositeTypes) 0 }}
	LoadTypes(ctx context.Context, typeNames []string) ([]*pgtype.Type, error)
	TypeMap() *pgtype.Map
{{- end }}
}

{{ if .EmitMethodsWithDBArgument}}
func New() *Queries {
	return &Queries{}
{{- else -}}
func New(db DB) *Queries {
	return &Queries{db: db}
{{- end}}
}

type Queries struct {
    {{if not .EmitMethodsWithDBArgument}}
	db DBTX
    {{end}}
}

{{if gt (len .CompositeTypes) 0}}
{{if not .EmitMethodsWithDBArgument}}
func (q *Queries) RegisterTypes(ctx context.Context) error {
	db, ok := q.db.(DB)
	if !ok {
		return fmt.Errorf("cannot register types with a transaction object")
	}
{{else}}
func (q *Queries) RegisterTypes(ctx context.Context, db DB) error {
{{end}}
	typeNames := []string{ 
	{{- range .CompositeTypes}}
		"{{.SQLName}}",
		"_{{.SQLName}}",
	{{- end}}
	}
	dataTypes, err := db.LoadTypes(ctx, typeNames)
	if err != nil {
		return err
	}
	db.TypeMap().RegisterTypes(dataTypes)
	return nil
}
{{end}}
{{if not .EmitMethodsWithDBArgument}}
func (q *Queries) WithTx(tx pgx.Tx) *Queries {
	return &Queries{
		db: tx,
	}
}
{{end}}
{{end}}
