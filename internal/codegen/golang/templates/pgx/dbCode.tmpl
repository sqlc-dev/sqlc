{{define "dbCodeTemplatePgx"}}

type DBTX interface {
	Begin(context.Context) (pgx.Tx, error)
	BeginTx(context.Context, txOptions TxOptions) (pgx.Tx, error)
	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
	QueryRow(context.Context, string, ...interface{}) pgx.Row
{{- if .UsesCopyFrom }}
	CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error)
{{- end }}
{{- if .UsesBatch }}
	SendBatch(context.Context, *pgx.Batch) pgx.BatchResults
{{- end }}
}

{{ if .EmitMethodsWithDBArgument}}
func New() *Queries {
	return &Queries{}
{{- else -}}
func New(db DBTX) *Queries {
	return &Queries{db: db}
{{- end}}
}

type Queries struct {
    {{if not .EmitMethodsWithDBArgument}}
	db DBTX
    {{end}}
}

{{if not .EmitMethodsWithDBArgument}}
func (q *Queries) WithTx(tx pgx.Tx) *Queries {
	return &Queries{
		db: tx,
	}
}
func (q *Queries) Begin(ctx context.Context) (*Queries, error) {
	tx, err := q.db.Begin(ctx)
	if (err != nil {
		return nil, err
	}
	return q.WithTx(tx), nil
}
func (q *Queries) BeginTx(ctx context.Context, txOptions TxOptions) (*Queries, error) {
	tx, err := q.db.BeginTx(ctx, txOptions)
	if (err != nil {
		return nil, err
	}
	return q.WithTx(tx), nil
}
{{end}}
{{end}}
