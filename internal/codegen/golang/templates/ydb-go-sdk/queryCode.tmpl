{{define "queryCodeYDB"}}
{{range .GoQueries}}
{{if $.OutputQuery .SourceName}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}

{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.YDBUniqueFieldsWithComments}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}{{if .Comment}} {{.Comment}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
{{if .Arg.YDBHasComplexContainers}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{if $.EmitMethodsWithDBArgument}}db DBTX, {{end}}{{if .Arg.YDBPair}}{{.Arg.YDBPair}}, {{end}}params ydb.Params, opts ...query.ExecuteOption) ({{.Ret.DefineType}}, error) {
{{else}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{if $.EmitMethodsWithDBArgument}}db DBTX, {{end}}{{if .Arg.YDBPair}}{{.Arg.YDBPair}}, {{end}}opts ...query.ExecuteOption) ({{.Ret.DefineType}}, error) {
{{end -}}
    {{- $dbArg := "q.db" }}{{- if $.EmitMethodsWithDBArgument }}{{- $dbArg = "db" }}{{- end -}}
    {{- if .Arg.IsEmpty -}}
    row, err := {{$dbArg}}.QueryRow(ctx, {{.ConstantName}}, opts...)
    {{- else -}}
    {{- .Arg.YDBParamsBuilder}}
    {{- if .Arg.YDBHasComplexContainers }}
    for name, value := range params.Range() {
        parameters = parameters.Param(name).Any(value)
    }
    {{- end }}
    row, err := {{$dbArg}}.QueryRow(ctx, {{.ConstantName}}, 
        {{- if .Arg.YDBHasParams }}
        append(opts, query.WithParameters(parameters.Build()))...,
        {{- else }}
        opts...,
        {{- end }}
    )
    {{- end }}
    {{- if or (ne .Arg.Pair .Ret.Pair) (ne .Arg.DefineType .Ret.DefineType) }}
	var {{.Ret.Name}} {{.Ret.Type}}
	{{- end}}
    if err != nil {
        {{- if $.WrapErrors}}
        return {{.Ret.ReturnName}}, xerrors.WithStackTrace(fmt.Errorf("query {{.MethodName}}: %w", err))
        {{- else }}
        return {{.Ret.ReturnName}}, xerrors.WithStackTrace(err)
        {{- end }}
    }
	err = row.Scan({{.Ret.Scan}})
	{{- if $.WrapErrors}}
	if err != nil {
		return {{.Ret.ReturnName}}, xerrors.WithStackTrace(fmt.Errorf("query {{.MethodName}}: %w", err))
	}
	{{- else }}
	if err != nil {
		return {{.Ret.ReturnName}}, xerrors.WithStackTrace(err)
	}
	{{- end}}
	return {{.Ret.ReturnName}}, nil
}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
{{if .Arg.YDBHasComplexContainers}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{if $.EmitMethodsWithDBArgument}}db DBTX, {{end}}{{if .Arg.YDBPair}}{{.Arg.YDBPair}}, {{end}}params ydb.Params, opts ...query.ExecuteOption) ([]{{.Ret.DefineType}}, error) {
{{else}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{if $.EmitMethodsWithDBArgument}}db DBTX, {{end}}{{if .Arg.YDBPair}}{{.Arg.YDBPair}}, {{end}}opts ...query.ExecuteOption) ([]{{.Ret.DefineType}}, error) {
{{end}}
    {{- $dbArg := "q.db" }}{{- if $.EmitMethodsWithDBArgument }}{{- $dbArg = "db" }}{{- end -}}
    {{- if .Arg.IsEmpty -}}
    result, err := {{$dbArg}}.QueryResultSet(ctx, {{.ConstantName}}, opts...)
    {{- else -}}
    {{- .Arg.YDBParamsBuilder}}
    {{- if .Arg.YDBHasComplexContainers }}
    for name, value := range params.Range() {
        parameters = parameters.Param(name).Any(value)
    }
    {{- end }}
    result, err := {{$dbArg}}.QueryResultSet(ctx, {{.ConstantName}}, 
        {{- if .Arg.YDBHasParams }}
        append(opts, query.WithParameters(parameters.Build()))...,
        {{- else }}
        opts...,
        {{- end }}
    )
    {{- end }}
    if err != nil {
        {{- if $.WrapErrors}}
        return nil, xerrors.WithStackTrace(fmt.Errorf("query {{.MethodName}}: %w", err))
        {{- else }}
        return nil, xerrors.WithStackTrace(err)
        {{- end }}
    }
    {{- if $.EmitEmptySlices}}
    items := []{{.Ret.DefineType}}{}
    {{else}}
    var items []{{.Ret.DefineType}}
    {{end -}}
	for row, err := range result.Rows(ctx) {
		if err != nil {
			{{- if $.WrapErrors}}
            return nil, xerrors.WithStackTrace(fmt.Errorf("query {{.MethodName}}: %w", err))
            {{- else }}
            return nil, xerrors.WithStackTrace(err)
            {{- end }}
		}
		var {{.Ret.Name}} {{.Ret.Type}}
		if err := row.Scan({{.Ret.Scan}}); err != nil {
            {{- if $.WrapErrors}}
            return nil, xerrors.WithStackTrace(fmt.Errorf("query {{.MethodName}}: %w", err))
            {{- else }}
            return nil, xerrors.WithStackTrace(err)
            {{- end }}
        }
		items = append(items, {{.Ret.ReturnName}})
	}
	if err := result.Close(ctx); err != nil {
		{{- if $.WrapErrors}}
        return nil, xerrors.WithStackTrace(fmt.Errorf("query {{.MethodName}}: %w", err))
        {{- else }}
        return nil, xerrors.WithStackTrace(err)
        {{- end }}
	}
	return items, nil
}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
{{if .Arg.YDBHasComplexContainers}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{if $.EmitMethodsWithDBArgument}}db DBTX, {{end}}{{if .Arg.YDBPair}}{{.Arg.YDBPair}}, {{end}}params ydb.Params, opts ...query.ExecuteOption) error {
{{else}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{if $.EmitMethodsWithDBArgument}}db DBTX, {{end}}{{if .Arg.YDBPair}}{{.Arg.YDBPair}}, {{end}}opts ...query.ExecuteOption) error {
{{end -}}
    {{- $dbArg := "q.db" }}{{- if $.EmitMethodsWithDBArgument }}{{- $dbArg = "db" }}{{- end -}}
    {{- if .Arg.IsEmpty -}}
    err := {{$dbArg}}.Exec(ctx, {{.ConstantName}}, opts...)
    {{- else -}}
    {{- .Arg.YDBParamsBuilder}}
    {{- if .Arg.YDBHasComplexContainers }}
    for name, value := range params.Range() {
        parameters = parameters.Param(name).Any(value)
    }
    {{- end }}
    err := {{$dbArg}}.Exec(ctx, {{.ConstantName}}, 
        {{- if .Arg.YDBHasParams }}
        append(opts, query.WithParameters(parameters.Build()))...,
        {{- else }}
        opts...,
        {{- end }}
    )
    {{- end }}
    if err != nil {
        {{- if $.WrapErrors }}
        return xerrors.WithStackTrace(fmt.Errorf("query {{.MethodName}}: %w", err))
        {{- else }}
        return xerrors.WithStackTrace(err)
        {{- end }}
    }
    return nil
}
{{end}}

{{end}}
{{end}}
{{end}}
