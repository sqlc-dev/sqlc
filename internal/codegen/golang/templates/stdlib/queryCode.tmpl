{{define "queryCodeStd"}}
{{range .GoQueries}}
{{if $.OutputQuery .SourceName}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}

{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.UniqueFields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if emitSchemaName }}
func (q *Queries) {{.MethodName}}(ctx context.Context, schema string, {{ dbarg }} {{.Arg.Pair}}) ({{.Ret.DefineType}}, error) {
{{- else }}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) error {
{{- end }}
    {{- template "queryCodeStdExec" . }}
	{{- if or (ne .Arg.Pair .Ret.Pair) (ne .Arg.DefineType .Ret.DefineType) }}
	var {{.Ret.Name}} {{.Ret.Type}}
	{{- end}}
	{{- if emitSchemaName }} 
    err := row.Scan({{.Ret.Scan}})
    {{- else }}
    err := row.Scan({{.Ret.Scan}})
    {{- end }}
	return {{.Ret.ReturnName}}, err
}
{{end}}

{{if eq .Cmd ":many"}}
var columnRegex = regexp.MustCompile(`SELECT\s+([\w,\s]+)\s+FROM`);

{{range .Comments}}//{{.}}
{{end -}}
{{- if emitSchemaName }}

type {{.MethodName}}Filter struct {
    FieldName string
    Value     string
}

type {{.MethodName}}FilterParams struct {
    ExactParams []{{.MethodName}}Filter
    InParams    []{{.MethodName}}Filter
    LikeParams  []{{.MethodName}}Filter
    SinceParams []{{.MethodName}}Filter
    MaxParams   []{{.MethodName}}Filter
    SortParam   string
    SortOrder   string
    Pagination  bool
    PerPage     int 
    PageNumber  int
}

func (q *Queries) {{.MethodName}}(ctx context.Context, schema string, filterParams {{.MethodName}}FilterParams, {{ dbarg }} {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {;
{{- else }}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {
{{- end }}
    {{- template "queryCodeStdExec" . }}
    if err != nil {
        return nil, err
    }
    defer rows.Close()
    {{- if $.EmitEmptySlices}}
    items := []{{.Ret.DefineType}}{}
    {{else}}
    var items []{{.Ret.DefineType}}
    {{end -}}
    for rows.Next() {
        var {{.Ret.Name}} {{.Ret.Type}}
        if err := rows.Scan({{.Ret.Scan}}); err != nil {
            return nil, err
        }
        items = append(items, {{.Ret.ReturnName}})
    }
    if err := rows.Close(); err != nil {
        return nil, err
    }
    if err := rows.Err(); err != nil {
        return nil, err
    }
    return items, nil
}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if emitSchemaName }}
func (q *Queries) {{.MethodName}}(ctx context.Context, schema string, {{ dbarg }} {{.Arg.Pair}}) error {
{{- else }}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) error {
{{- end }}
    {{- template "queryCodeStdExec" . }}
    return err
}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if emitSchemaName }}
func (q *Queries) {{.MethodName}}(ctx context.Context, schema string, {{ dbarg }} {{.Arg.Pair}}) (int64, error) {
{{- else }}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) (int64, error) {
{{- end }}
    {{- template "queryCodeStdExec" . }}
    if err != nil {
        return 0, err
    }
    return result.RowsAffected()
}
{{end}}

{{if eq .Cmd ":execlastid"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if emitSchemaName }}
func (q *Queries) {{.MethodName}}(ctx context.Context, schema string, {{ dbarg }} {{.Arg.Pair}}) (int64, error) {
{{- else }}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) (int64, error) {
{{- end }}
    {{- template "queryCodeStdExec" . }}
    if err != nil {
        return 0, err
    }
    return result.LastInsertId()
}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if emitSchemaName }}
func (q *Queries) {{.MethodName}}(ctx context.Context, schema string, {{ dbarg }} {{.Arg.Pair}}) (sql.Result, error) {
{{else }}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) (sql.Result, error) {
{{- end }}
    {{- template "queryCodeStdExec" . }}
}
{{end}}

{{end}}
{{end}}
{{end}}

{{define "queryCodeStdExec"}}
    {{- if .Arg.HasSqlcSlices }}
        query := strings.ReplaceAll({{.ConstantName}}, "%s", schema)

        // Extract the columns from the query;
	    columns := columnRegex.FindString(query);
        
        var queryParams []interface{}
        
        {{- if .Arg.Struct }}
            {{- $arg := .Arg }}
            {{- range .Arg.Struct.Fields }}
                {{- if .HasSqlcSlice }}
                    if len({{$arg.VariableForField .}}) > 0 {
                      for _, v := range {{$arg.VariableForField .}} {
                        queryParams = append(queryParams, v)
                      }
                      query = strings.Replace(query, "/*SLICE:{{.Column.Name}}*/?", strings.Repeat(",?", len({{$arg.VariableForField .}}))[1:], 1)
                    } else {
                      query = strings.Replace(query, "/*SLICE:{{.Column.Name}}*/?", "NULL", 1)
                    }
                {{- else }}
                  queryParams = append(queryParams, {{$arg.VariableForField .}})
                {{- end }}
            {{- end }}
        {{- else }}
            {{- /* Single argument parameter to this goroutine (they are not packed
                in a struct), because .Arg.HasSqlcSlices further up above was true,
                this section is 100% a slice (impossible to get here otherwise).
            */}}
            if len({{.Arg.Name}}) > 0 {
              for _, v := range {{.Arg.Name}} {
                queryParams = append(queryParams, v)
              }
              query = strings.ReplaceAll(query, "/*SLICE:{{.Arg.Column.Name}}*/?", strings.Repeat(",?", len({{.Arg.Name}}))[1:])
            } else {
              query = strings.ReplaceAll(query, "/*SLICE:{{.Arg.Column.Name}}*/?", "NULL")
            }
        {{- end }}

        {{- if emitPreparedQueries }}
            {{- if emitSchemaName }}
            replacedQuery := strings.ReplaceAll(query, "%s", schema)
            {{ queryRetval . }} {{ queryMethod . }}(ctx, nil, replacedQuery, queryParams...)
            {{- else }}
            {{ queryRetval . }} {{ queryMethod . }}(ctx, nil, query, queryParams...)
            {{- end }}
        {{- else}}
            {{- if emitSchemaName }}
            replacedQuery := strings.ReplaceAll(query, "%s", schema)
            {{ queryRetval . }} {{ queryMethod . }}(ctx, replacedQuery, queryParams...)
            {{- else }}
            {{ queryRetval . }} {{ queryMethod . }}(ctx, query, queryParams...)
            {{- end -}}
        {{- end -}}
    {{- else if emitPreparedQueries }}
        {{- queryRetval . }} {{ queryMethod . }}(ctx, q.{{.FieldName}}, {{.ConstantName}}, {{.Arg.Params}})
    {{- else}}
        {{- if emitSchemaName }}
        query := strings.ReplaceAll({{.ConstantName}}, "%s", schema);

        {{- /**
            If the query has a filter, we need to add the filter to the query
            and the query params.
            */}}

        {{- if eq .Cmd ":many"}}

        // Extract the columns from the query;
	    columns := columnRegex.FindString(query);

        isFirstFilter := true;
        var queryParams []interface{};

        for _, filter := range filterParams.ExactParams {
            // Is the filter in the columns?
            if !strings.Contains(columns, filter.FieldName) {
                continue
            }
            
            if isFirstFilter {
                query += " WHERE "
                isFirstFilter = false
            } else {
                query += " AND "
            }

            query += filter.FieldName + " = ?"
            queryParams = append(queryParams, filter.Value)
        };

        for _, filter := range filterParams.InParams {
            // Is the filter in the columns?
            if !strings.Contains(columns, filter.FieldName) {
                continue
            }
            
            if isFirstFilter {
                query += " WHERE "
                isFirstFilter = false
            } else {
                query += " AND "
            }

            query += filter.FieldName + " IN (?)"
            queryParams = append(queryParams, filter.Value)
        };

        for _, filter := range filterParams.LikeParams {
            // Is the filter in the columns?
            if !strings.Contains(columns, filter.FieldName) {
                continue
            }

            if isFirstFilter {
                query += " WHERE "
                isFirstFilter = false
            } else {
                query += " AND "
            }   

            query += filter.FieldName + " LIKE ?"
            queryParams = append(queryParams, filter.Value)
        };

        for _, filter := range filterParams.SinceParams {
            // Is the filter in the columns?
            if !strings.Contains(columns, filter.FieldName) {
                continue
            }

            if isFirstFilter {
                query += " WHERE "
                isFirstFilter = false
            } else {
                query += " AND "
            }

            query += filter.FieldName + " > ?"
            queryParams = append(queryParams, filter.Value)
        };

        for _, filter := range filterParams.MaxParams {
            // Is the filter in the columns?
            if !strings.Contains(columns, filter.FieldName) {
                continue
            }

            if isFirstFilter {
                query += " WHERE "
                isFirstFilter = false
            } else {
                query += " AND "
            }

            query += filter.FieldName + " < ?"
            queryParams = append(queryParams, filter.Value)
        };

        if filterParams.SortParam != "" {
            query += " ORDER BY " + filterParams.SortParam + " " + filterParams.SortOrder
        }

        if filterParams.Pagination {
            query += " LIMIT " + fmt.Sprint(filterParams.PerPage) + " OFFSET " + fmt.Sprint(filterParams.PageNumber * filterParams.PerPage)
        }

        // If there is not the ; at the end, add it
        if !strings.HasSuffix(query, ";") {
            query += ";"
        };

        {{- queryRetval . }} {{ queryMethod . }}(ctx, query, queryParams...)

        {{- end }}

        {{- else }}
        {{- queryRetval . }} {{ queryMethod . }}(ctx, {{.ConstantName}}, {{.Arg.Params}})
        {{- end -}}

        {{- if ne .Cmd ":many"}}
        {{- queryRetval . }} {{ queryMethod . }}(ctx, query, {{.Arg.Params}})
        {{- end -}}
    {{- end -}}
{{end}}
