// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"
)

const groupConcat = `-- name: GroupConcat :one
SELECT group_concat(name order by id asc) FROM book
`

func (q *Queries) GroupConcat(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, groupConcat)
	var group_concat string
	err := row.Scan(&group_concat)
	return group_concat, err
}

const groupConcatDelimeter = `-- name: GroupConcatDelimeter :one
SELECT group_concat(name, ',' order by id asc) FROM book
`

func (q *Queries) GroupConcatDelimeter(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, groupConcatDelimeter)
	var group_concat string
	err := row.Scan(&group_concat)
	return group_concat, err
}

const groupConcatOne = `-- name: GroupConcatOne :one
SELECT group_concat(name order by id asc) FROM book
`

func (q *Queries) GroupConcatOne(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, groupConcatOne)
	var group_concat string
	err := row.Scan(&group_concat)
	return group_concat, err
}

const stringAgg = `-- name: StringAgg :one
SELECT string_agg(name, ',' order by id asc) FROM book
`

func (q *Queries) StringAgg(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, stringAgg)
	var string_agg interface{}
	err := row.Scan(&string_agg)
	return string_agg, err
}
