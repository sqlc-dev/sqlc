// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const fooByAandB = `-- name: FooByAandB :many
SELECT a, b FROM foo 
WHERE a = $a and b = $b
`

type FooByAandBParams struct {
	A string
	B string
}

func (q *Queries) FooByAandB(ctx context.Context, arg FooByAandBParams, opts ...query.ExecuteOption) ([]Foo, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$a").Text(arg.A)
	parameters = parameters.Param("$b").Text(arg.B)
	result, err := q.db.QueryResultSet(ctx, fooByAandB,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Foo
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Foo
		if err := row.Scan(&i.A, &i.B); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
