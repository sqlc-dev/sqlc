// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const identOnNonNullable = `-- name: IdentOnNonNullable :many
SELECT bar FROM foo WHERE bar = $bar
`

func (q *Queries) IdentOnNonNullable(ctx context.Context, bar *string, opts ...query.ExecuteOption) ([]string, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$bar").BeginOptional().Text(bar).EndOptional()
	result, err := q.db.QueryResultSet(ctx, identOnNonNullable,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var bar string
		if err := row.Scan(&bar); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, bar)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const identOnNullable = `-- name: IdentOnNullable :many
SELECT maybe_bar FROM foo WHERE maybe_bar = $maybe_bar
`

func (q *Queries) IdentOnNullable(ctx context.Context, maybeBar *string, opts ...query.ExecuteOption) ([]*string, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$maybe_bar").BeginOptional().Text(maybeBar).EndOptional()
	result, err := q.db.QueryResultSet(ctx, identOnNullable,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []*string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var maybe_bar *string
		if err := row.Scan(&maybe_bar); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, maybe_bar)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const stringOnNonNullable = `-- name: StringOnNonNullable :many
SELECT bar FROM foo WHERE bar = $bar
`

func (q *Queries) StringOnNonNullable(ctx context.Context, bar *string, opts ...query.ExecuteOption) ([]string, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$bar").BeginOptional().Text(bar).EndOptional()
	result, err := q.db.QueryResultSet(ctx, stringOnNonNullable,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var bar string
		if err := row.Scan(&bar); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, bar)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const stringOnNullable = `-- name: StringOnNullable :many
SELECT maybe_bar FROM foo WHERE maybe_bar = $maybe_bar
`

func (q *Queries) StringOnNullable(ctx context.Context, maybeBar *string, opts ...query.ExecuteOption) ([]*string, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$maybe_bar").BeginOptional().Text(maybeBar).EndOptional()
	result, err := q.db.QueryResultSet(ctx, stringOnNullable,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []*string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var maybe_bar *string
		if err := row.Scan(&maybe_bar); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, maybe_bar)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
