// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const listAuthors = `-- name: ListAuthors :many
SELECT id, name AS name, bio
FROM authors
`

func (q *Queries) ListAuthors(ctx context.Context, opts ...query.ExecuteOption) ([]Author, error) {
	result, err := q.db.QueryResultSet(ctx, listAuthors, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Author
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Author
		if err := row.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const listAuthorsIdenticalAlias = `-- name: ListAuthorsIdenticalAlias :many
SELECT id, name AS name, bio
FROM authors
`

func (q *Queries) ListAuthorsIdenticalAlias(ctx context.Context, opts ...query.ExecuteOption) ([]Author, error) {
	result, err := q.db.QueryResultSet(ctx, listAuthorsIdenticalAlias, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Author
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Author
		if err := row.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const listMetrics = `-- name: ListMetrics :many
SELECT DateTime::Format("%Y-%m-%d")(time) AS bucket, city_name, Avg(temp_c)
FROM weather_metrics
WHERE time > DateTime::MakeTimestamp(DateTime::Now()) - Interval("P6M")
GROUP BY bucket, city_name
ORDER BY bucket DESC
`

type ListMetricsRow struct {
	Bucket   []byte
	CityName string
	Avg      interface{}
}

func (q *Queries) ListMetrics(ctx context.Context, opts ...query.ExecuteOption) ([]ListMetricsRow, error) {
	result, err := q.db.QueryResultSet(ctx, listMetrics, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []ListMetricsRow
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i ListMetricsRow
		if err := row.Scan(&i.Bucket, &i.CityName, &i.Avg); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
