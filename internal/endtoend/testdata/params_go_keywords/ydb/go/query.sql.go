// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"
)

const keywordBreak = `-- name: KeywordBreak :exec
SELECT CAST($break AS Text)
`

func (q *Queries) KeywordBreak(ctx context.Context, break_ string) error {
	_, err := q.db.ExecContext(ctx, keywordBreak, break_)
	return err
}

const keywordCase = `-- name: KeywordCase :exec
SELECT CAST($case AS Text)
`

func (q *Queries) KeywordCase(ctx context.Context, case_ string) error {
	_, err := q.db.ExecContext(ctx, keywordCase, case_)
	return err
}

const keywordChan = `-- name: KeywordChan :exec
SELECT CAST($chan AS Text)
`

func (q *Queries) KeywordChan(ctx context.Context, chan_ string) error {
	_, err := q.db.ExecContext(ctx, keywordChan, chan_)
	return err
}

const keywordConst = `-- name: KeywordConst :exec
SELECT CAST($const AS Text)
`

func (q *Queries) KeywordConst(ctx context.Context, const_ string) error {
	_, err := q.db.ExecContext(ctx, keywordConst, const_)
	return err
}

const keywordContinue = `-- name: KeywordContinue :exec
SELECT CAST($continue AS Text)
`

func (q *Queries) KeywordContinue(ctx context.Context, continue_ string) error {
	_, err := q.db.ExecContext(ctx, keywordContinue, continue_)
	return err
}

const keywordDefault = `-- name: KeywordDefault :exec
SELECT CAST($default AS Text)
`

func (q *Queries) KeywordDefault(ctx context.Context, default_ string) error {
	_, err := q.db.ExecContext(ctx, keywordDefault, default_)
	return err
}

const keywordDefer = `-- name: KeywordDefer :exec
SELECT CAST($defer AS Text)
`

func (q *Queries) KeywordDefer(ctx context.Context, defer_ string) error {
	_, err := q.db.ExecContext(ctx, keywordDefer, defer_)
	return err
}

const keywordElse = `-- name: KeywordElse :exec
SELECT CAST($else AS Text)
`

func (q *Queries) KeywordElse(ctx context.Context, else_ string) error {
	_, err := q.db.ExecContext(ctx, keywordElse, else_)
	return err
}

const keywordFallthrough = `-- name: KeywordFallthrough :exec
SELECT CAST($fallthrough AS Text)
`

func (q *Queries) KeywordFallthrough(ctx context.Context, fallthrough_ string) error {
	_, err := q.db.ExecContext(ctx, keywordFallthrough, fallthrough_)
	return err
}

const keywordFor = `-- name: KeywordFor :exec
SELECT CAST($for AS Text)
`

func (q *Queries) KeywordFor(ctx context.Context, for_ string) error {
	_, err := q.db.ExecContext(ctx, keywordFor, for_)
	return err
}

const keywordFunc = `-- name: KeywordFunc :exec
SELECT CAST($func AS Text)
`

func (q *Queries) KeywordFunc(ctx context.Context, func_ string) error {
	_, err := q.db.ExecContext(ctx, keywordFunc, func_)
	return err
}

const keywordGo = `-- name: KeywordGo :exec
SELECT CAST($go AS Text)
`

func (q *Queries) KeywordGo(ctx context.Context, go_ string) error {
	_, err := q.db.ExecContext(ctx, keywordGo, go_)
	return err
}

const keywordGoto = `-- name: KeywordGoto :exec
SELECT CAST($goto AS Text)
`

func (q *Queries) KeywordGoto(ctx context.Context, goto_ string) error {
	_, err := q.db.ExecContext(ctx, keywordGoto, goto_)
	return err
}

const keywordIf = `-- name: KeywordIf :exec
SELECT CAST($if AS Text)
`

func (q *Queries) KeywordIf(ctx context.Context, if_ string) error {
	_, err := q.db.ExecContext(ctx, keywordIf, if_)
	return err
}

const keywordImport = `-- name: KeywordImport :exec
SELECT CAST($import AS Text)
`

func (q *Queries) KeywordImport(ctx context.Context, import_ string) error {
	_, err := q.db.ExecContext(ctx, keywordImport, import_)
	return err
}

const keywordInterface = `-- name: KeywordInterface :exec
SELECT CAST($interface AS Text)
`

func (q *Queries) KeywordInterface(ctx context.Context, interface_ string) error {
	_, err := q.db.ExecContext(ctx, keywordInterface, interface_)
	return err
}

const keywordMap = `-- name: KeywordMap :exec
SELECT CAST($map AS Text)
`

func (q *Queries) KeywordMap(ctx context.Context, map_ string) error {
	_, err := q.db.ExecContext(ctx, keywordMap, map_)
	return err
}

const keywordPackage = `-- name: KeywordPackage :exec
SELECT CAST($package AS Text)
`

func (q *Queries) KeywordPackage(ctx context.Context, package_ string) error {
	_, err := q.db.ExecContext(ctx, keywordPackage, package_)
	return err
}

const keywordQ = `-- name: KeywordQ :exec
SELECT CAST($q AS Text)
`

func (q *Queries) KeywordQ(ctx context.Context, q_ string) error {
	_, err := q.db.ExecContext(ctx, keywordQ, q_)
	return err
}

const keywordRange = `-- name: KeywordRange :exec
SELECT CAST($range AS Text)
`

func (q *Queries) KeywordRange(ctx context.Context, range_ string) error {
	_, err := q.db.ExecContext(ctx, keywordRange, range_)
	return err
}

const keywordReturn = `-- name: KeywordReturn :exec
SELECT CAST($return AS Text)
`

func (q *Queries) KeywordReturn(ctx context.Context, return_ string) error {
	_, err := q.db.ExecContext(ctx, keywordReturn, return_)
	return err
}

const keywordSelect = `-- name: KeywordSelect :exec
SELECT CAST($select AS Text)
`

func (q *Queries) KeywordSelect(ctx context.Context, select_ string) error {
	_, err := q.db.ExecContext(ctx, keywordSelect, select_)
	return err
}

const keywordStruct = `-- name: KeywordStruct :exec
SELECT CAST($struct AS Text)
`

func (q *Queries) KeywordStruct(ctx context.Context, struct_ string) error {
	_, err := q.db.ExecContext(ctx, keywordStruct, struct_)
	return err
}

const keywordSwitch = `-- name: KeywordSwitch :exec
SELECT CAST($switch AS Text)
`

func (q *Queries) KeywordSwitch(ctx context.Context, switch_ string) error {
	_, err := q.db.ExecContext(ctx, keywordSwitch, switch_)
	return err
}

const keywordType = `-- name: KeywordType :exec
SELECT CAST($type AS Text)
`

func (q *Queries) KeywordType(ctx context.Context, type_ string) error {
	_, err := q.db.ExecContext(ctx, keywordType, type_)
	return err
}

const keywordVar = `-- name: KeywordVar :exec
SELECT CAST($var AS Text)
`

func (q *Queries) KeywordVar(ctx context.Context, var_ string) error {
	_, err := q.db.ExecContext(ctx, keywordVar, var_)
	return err
}

const selectBreak = `-- name: SelectBreak :one
SELECT "break" FROM go_keywords
`

func (q *Queries) SelectBreak(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectBreak)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectCase = `-- name: SelectCase :one
SELECT "case" FROM go_keywords
`

func (q *Queries) SelectCase(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectCase)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectChan = `-- name: SelectChan :one
SELECT "chan" FROM go_keywords
`

func (q *Queries) SelectChan(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectChan)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectConst = `-- name: SelectConst :one
SELECT "const" FROM go_keywords
`

func (q *Queries) SelectConst(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectConst)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectContinue = `-- name: SelectContinue :one
SELECT "continue" FROM go_keywords
`

func (q *Queries) SelectContinue(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectContinue)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectDefault = `-- name: SelectDefault :one
SELECT "default" FROM go_keywords
`

func (q *Queries) SelectDefault(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectDefault)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectDefer = `-- name: SelectDefer :one
SELECT "defer" FROM go_keywords
`

func (q *Queries) SelectDefer(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectDefer)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectElse = `-- name: SelectElse :one
SELECT "else" FROM go_keywords
`

func (q *Queries) SelectElse(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectElse)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectFallthrough = `-- name: SelectFallthrough :one
SELECT "fallthrough" FROM go_keywords
`

func (q *Queries) SelectFallthrough(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectFallthrough)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectFor = `-- name: SelectFor :one
SELECT "for" FROM go_keywords
`

func (q *Queries) SelectFor(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectFor)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectFunc = `-- name: SelectFunc :one
SELECT "func" FROM go_keywords
`

func (q *Queries) SelectFunc(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectFunc)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectGo = `-- name: SelectGo :one
SELECT "go" FROM go_keywords
`

func (q *Queries) SelectGo(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectGo)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectGoto = `-- name: SelectGoto :one
SELECT "goto" FROM go_keywords
`

func (q *Queries) SelectGoto(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectGoto)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectIf = `-- name: SelectIf :one
SELECT "if" FROM go_keywords
`

func (q *Queries) SelectIf(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectIf)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectImport = `-- name: SelectImport :one
SELECT "import" FROM go_keywords
`

func (q *Queries) SelectImport(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectImport)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectInterface = `-- name: SelectInterface :one
SELECT "interface" FROM go_keywords
`

func (q *Queries) SelectInterface(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectInterface)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectMap = `-- name: SelectMap :one
SELECT "map" FROM go_keywords
`

func (q *Queries) SelectMap(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectMap)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectPackage = `-- name: SelectPackage :one
SELECT "package" FROM go_keywords
`

func (q *Queries) SelectPackage(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectPackage)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectQ = `-- name: SelectQ :one
SELECT "q" FROM go_keywords
`

func (q *Queries) SelectQ(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectQ)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectRange = `-- name: SelectRange :one
SELECT "range" FROM go_keywords
`

func (q *Queries) SelectRange(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectRange)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectReturn = `-- name: SelectReturn :one
SELECT "return" FROM go_keywords
`

func (q *Queries) SelectReturn(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectReturn)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectSelect = `-- name: SelectSelect :one
SELECT "select" FROM go_keywords
`

func (q *Queries) SelectSelect(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectSelect)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectStruct = `-- name: SelectStruct :one
SELECT "struct" FROM go_keywords
`

func (q *Queries) SelectStruct(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectStruct)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectSwitch = `-- name: SelectSwitch :one
SELECT "switch" FROM go_keywords
`

func (q *Queries) SelectSwitch(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectSwitch)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectType = `-- name: SelectType :one
SELECT "type" FROM go_keywords
`

func (q *Queries) SelectType(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectType)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}

const selectVar = `-- name: SelectVar :one
SELECT "var" FROM go_keywords
`

func (q *Queries) SelectVar(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, selectVar)
	var column_1 string
	err := row.Scan(&column_1)
	return column_1, err
}
