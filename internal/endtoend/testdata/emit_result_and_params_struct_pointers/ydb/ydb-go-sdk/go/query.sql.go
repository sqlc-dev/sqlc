// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const getAll = `-- name: GetAll :many
SELECT a, b FROM foo
`

func (q *Queries) GetAll(ctx context.Context, opts ...query.ExecuteOption) ([]*Foo, error) {
	result, err := q.db.QueryResultSet(ctx, getAll, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []*Foo
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Foo
		if err := row.Scan(&i.A, &i.B); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, &i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const getAllAByB = `-- name: GetAllAByB :many
SELECT a FROM foo WHERE b = $b
`

func (q *Queries) GetAllAByB(ctx context.Context, b *int32, opts ...query.ExecuteOption) ([]int32, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$b").BeginOptional().Int32(b).EndOptional()
	result, err := q.db.QueryResultSet(ctx, getAllAByB,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []int32
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var a int32
		if err := row.Scan(&a); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, a)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const getOne = `-- name: GetOne :one
SELECT a, b FROM foo WHERE a = $a AND b = $b LIMIT 1
`

type GetOneParams struct {
	A int32
	B *int32
}

func (q *Queries) GetOne(ctx context.Context, arg *GetOneParams, opts ...query.ExecuteOption) (*Foo, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$a").Int32(arg.A)
	parameters = parameters.Param("$b").BeginOptional().Int32(arg.B).EndOptional()
	row, err := q.db.QueryRow(ctx, getOne,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i Foo
	if err != nil {
		return &i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&i.A, &i.B)
	if err != nil {
		return &i, xerrors.WithStackTrace(err)
	}
	return &i, nil
}
