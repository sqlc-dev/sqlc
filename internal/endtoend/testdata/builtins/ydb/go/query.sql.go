// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"
	"time"
)

const fByteAt = `-- name: FByteAt :one
SELECT ByteAt("abc", 1)
`

func (q *Queries) FByteAt(ctx context.Context) (uint8, error) {
	row := q.db.QueryRowContext(ctx, fByteAt)
	var byteat uint8
	err := row.Scan(&byteat)
	return byteat, err
}

const fClearBit = `-- name: FClearBit :one
SELECT ClearBit("a", 0)
`

func (q *Queries) FClearBit(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, fClearBit)
	var clearbit interface{}
	err := row.Scan(&clearbit)
	return clearbit, err
}

const fCurrentUtcDate = `-- name: FCurrentUtcDate :one
SELECT CurrentUtcDate()
`

func (q *Queries) FCurrentUtcDate(ctx context.Context) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, fCurrentUtcDate)
	var currentutcdate time.Time
	err := row.Scan(&currentutcdate)
	return currentutcdate, err
}

const fCurrentUtcDatetime = `-- name: FCurrentUtcDatetime :one
SELECT CurrentUtcDatetime()
`

func (q *Queries) FCurrentUtcDatetime(ctx context.Context) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, fCurrentUtcDatetime)
	var currentutcdatetime time.Time
	err := row.Scan(&currentutcdatetime)
	return currentutcdatetime, err
}

const fCurrentUtcTimestamp = `-- name: FCurrentUtcTimestamp :one
SELECT CurrentUtcTimestamp()
`

func (q *Queries) FCurrentUtcTimestamp(ctx context.Context) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, fCurrentUtcTimestamp)
	var currentutctimestamp time.Time
	err := row.Scan(&currentutctimestamp)
	return currentutctimestamp, err
}

const fDateTimeFrommilliseconds = `-- name: FDateTimeFrommilliseconds :one
SELECT DateTime::Frommilliseconds(1640995200000)
`

func (q *Queries) FDateTimeFrommilliseconds(ctx context.Context) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, fDateTimeFrommilliseconds)
	var datetime_frommilliseconds time.Time
	err := row.Scan(&datetime_frommilliseconds)
	return datetime_frommilliseconds, err
}

const fDateTimeFromseconds = `-- name: FDateTimeFromseconds :one
SELECT DateTime::Fromseconds(1640995200)
`

func (q *Queries) FDateTimeFromseconds(ctx context.Context) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, fDateTimeFromseconds)
	var datetime_fromseconds time.Time
	err := row.Scan(&datetime_fromseconds)
	return datetime_fromseconds, err
}

const fDateTimeGetdayofmonth = `-- name: FDateTimeGetdayofmonth :one
SELECT DateTime::Getdayofmonth(CurrentUtcDate())
`

func (q *Queries) FDateTimeGetdayofmonth(ctx context.Context) (uint8, error) {
	row := q.db.QueryRowContext(ctx, fDateTimeGetdayofmonth)
	var datetime_getdayofmonth uint8
	err := row.Scan(&datetime_getdayofmonth)
	return datetime_getdayofmonth, err
}

const fDateTimeGethour = `-- name: FDateTimeGethour :one
SELECT DateTime::Gethour(CurrentUtcDatetime())
`

func (q *Queries) FDateTimeGethour(ctx context.Context) (uint8, error) {
	row := q.db.QueryRowContext(ctx, fDateTimeGethour)
	var datetime_gethour uint8
	err := row.Scan(&datetime_gethour)
	return datetime_gethour, err
}

const fDateTimeGetminute = `-- name: FDateTimeGetminute :one
SELECT DateTime::Getminute(CurrentUtcDatetime())
`

func (q *Queries) FDateTimeGetminute(ctx context.Context) (uint8, error) {
	row := q.db.QueryRowContext(ctx, fDateTimeGetminute)
	var datetime_getminute uint8
	err := row.Scan(&datetime_getminute)
	return datetime_getminute, err
}

const fDateTimeGetmonth = `-- name: FDateTimeGetmonth :one
SELECT DateTime::Getmonth(CurrentUtcDate())
`

func (q *Queries) FDateTimeGetmonth(ctx context.Context) (uint8, error) {
	row := q.db.QueryRowContext(ctx, fDateTimeGetmonth)
	var datetime_getmonth uint8
	err := row.Scan(&datetime_getmonth)
	return datetime_getmonth, err
}

const fDateTimeGetsecond = `-- name: FDateTimeGetsecond :one
SELECT DateTime::Getsecond(CurrentUtcDatetime())
`

func (q *Queries) FDateTimeGetsecond(ctx context.Context) (uint8, error) {
	row := q.db.QueryRowContext(ctx, fDateTimeGetsecond)
	var datetime_getsecond uint8
	err := row.Scan(&datetime_getsecond)
	return datetime_getsecond, err
}

const fDateTimeGetyear = `-- name: FDateTimeGetyear :one
SELECT DateTime::Getyear(CurrentUtcDate())
`

// DateTime functions with concrete return types
func (q *Queries) FDateTimeGetyear(ctx context.Context) (uint16, error) {
	row := q.db.QueryRowContext(ctx, fDateTimeGetyear)
	var datetime_getyear uint16
	err := row.Scan(&datetime_getyear)
	return datetime_getyear, err
}

const fDateTimeIntervalfromdays = `-- name: FDateTimeIntervalfromdays :one
SELECT DateTime::Intervalfromdays(7)
`

func (q *Queries) FDateTimeIntervalfromdays(ctx context.Context) (time.Duration, error) {
	row := q.db.QueryRowContext(ctx, fDateTimeIntervalfromdays)
	var datetime_intervalfromdays time.Duration
	err := row.Scan(&datetime_intervalfromdays)
	return datetime_intervalfromdays, err
}

const fEndsWith = `-- name: FEndsWith :one
SELECT EndsWith("abcdef", "def")
`

func (q *Queries) FEndsWith(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fEndsWith)
	var endswith bool
	err := row.Scan(&endswith)
	return endswith, err
}

const fFind2 = `-- name: FFind2 :one
SELECT Find("abcdef", "cd")
`

func (q *Queries) FFind2(ctx context.Context) (uint32, error) {
	row := q.db.QueryRowContext(ctx, fFind2)
	var find uint32
	err := row.Scan(&find)
	return find, err
}

const fFind3 = `-- name: FFind3 :one
SELECT Find("abcdef", "c", 3)
`

func (q *Queries) FFind3(ctx context.Context) (uint32, error) {
	row := q.db.QueryRowContext(ctx, fFind3)
	var find uint32
	err := row.Scan(&find)
	return find, err
}

const fFlipBit = `-- name: FFlipBit :one
SELECT FlipBit("a", 0)
`

func (q *Queries) FFlipBit(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, fFlipBit)
	var flipbit interface{}
	err := row.Scan(&flipbit)
	return flipbit, err
}

const fIf2 = `-- name: FIf2 :one
SELECT IF(true, 1)
`

func (q *Queries) FIf2(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, fIf2)
	var if_ interface{}
	err := row.Scan(&if_)
	return if_, err
}

const fIf3 = `-- name: FIf3 :one
SELECT IF(false, 1, 2)
`

func (q *Queries) FIf3(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, fIf3)
	var if_ interface{}
	err := row.Scan(&if_)
	return if_, err
}

const fLen = `-- name: FLen :one
SELECT LEN("world")
`

func (q *Queries) FLen(ctx context.Context) (uint32, error) {
	row := q.db.QueryRowContext(ctx, fLen)
	var len uint32
	err := row.Scan(&len)
	return len, err
}

const fLength = `-- name: FLength :one
SELECT LENGTH("hello")
`

// Basic functions with concrete return types
func (q *Queries) FLength(ctx context.Context) (uint32, error) {
	row := q.db.QueryRowContext(ctx, fLength)
	var length uint32
	err := row.Scan(&length)
	return length, err
}

const fMathAbs = `-- name: FMathAbs :one
SELECT Math::Abs(-5.5)
`

func (q *Queries) FMathAbs(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathAbs)
	var math_abs float64
	err := row.Scan(&math_abs)
	return math_abs, err
}

const fMathAcos = `-- name: FMathAcos :one
SELECT Math::Acos(0.5)
`

func (q *Queries) FMathAcos(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathAcos)
	var math_acos float64
	err := row.Scan(&math_acos)
	return math_acos, err
}

const fMathAsin = `-- name: FMathAsin :one
SELECT Math::Asin(0.5)
`

func (q *Queries) FMathAsin(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathAsin)
	var math_asin float64
	err := row.Scan(&math_asin)
	return math_asin, err
}

const fMathAtan = `-- name: FMathAtan :one
SELECT Math::Atan(1.0)
`

func (q *Queries) FMathAtan(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathAtan)
	var math_atan float64
	err := row.Scan(&math_atan)
	return math_atan, err
}

const fMathAtan2 = `-- name: FMathAtan2 :one
SELECT Math::Atan2(1.0, 1.0)
`

func (q *Queries) FMathAtan2(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathAtan2)
	var math_atan2 float64
	err := row.Scan(&math_atan2)
	return math_atan2, err
}

const fMathCbrt = `-- name: FMathCbrt :one
SELECT Math::Cbrt(27.0)
`

func (q *Queries) FMathCbrt(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathCbrt)
	var math_cbrt float64
	err := row.Scan(&math_cbrt)
	return math_cbrt, err
}

const fMathCeil = `-- name: FMathCeil :one
SELECT Math::Ceil(4.2)
`

func (q *Queries) FMathCeil(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathCeil)
	var math_ceil float64
	err := row.Scan(&math_ceil)
	return math_ceil, err
}

const fMathCos = `-- name: FMathCos :one
SELECT Math::Cos(0.0)
`

func (q *Queries) FMathCos(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathCos)
	var math_cos float64
	err := row.Scan(&math_cos)
	return math_cos, err
}

const fMathE = `-- name: FMathE :one
SELECT Math::E()
`

func (q *Queries) FMathE(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathE)
	var math_e float64
	err := row.Scan(&math_e)
	return math_e, err
}

const fMathExp = `-- name: FMathExp :one
SELECT Math::Exp(1.0)
`

func (q *Queries) FMathExp(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathExp)
	var math_exp float64
	err := row.Scan(&math_exp)
	return math_exp, err
}

const fMathFloor = `-- name: FMathFloor :one
SELECT Math::Floor(4.8)
`

func (q *Queries) FMathFloor(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathFloor)
	var math_floor float64
	err := row.Scan(&math_floor)
	return math_floor, err
}

const fMathFmod = `-- name: FMathFmod :one
SELECT Math::Fmod(10.5, 3.0)
`

func (q *Queries) FMathFmod(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathFmod)
	var math_fmod float64
	err := row.Scan(&math_fmod)
	return math_fmod, err
}

const fMathFuzzyequals = `-- name: FMathFuzzyequals :one
SELECT Math::Fuzzyequals(1.0, 1.0001)
`

func (q *Queries) FMathFuzzyequals(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fMathFuzzyequals)
	var math_fuzzyequals bool
	err := row.Scan(&math_fuzzyequals)
	return math_fuzzyequals, err
}

const fMathHypot = `-- name: FMathHypot :one
SELECT Math::Hypot(3.0, 4.0)
`

func (q *Queries) FMathHypot(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathHypot)
	var math_hypot float64
	err := row.Scan(&math_hypot)
	return math_hypot, err
}

const fMathIsfinite = `-- name: FMathIsfinite :one
SELECT Math::Isfinite(5.0)
`

func (q *Queries) FMathIsfinite(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fMathIsfinite)
	var math_isfinite bool
	err := row.Scan(&math_isfinite)
	return math_isfinite, err
}

const fMathIsinf = `-- name: FMathIsinf :one
SELECT Math::Isinf(1.0/0.0)
`

func (q *Queries) FMathIsinf(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fMathIsinf)
	var math_isinf bool
	err := row.Scan(&math_isinf)
	return math_isinf, err
}

const fMathIsnan = `-- name: FMathIsnan :one
SELECT Math::Isnan(0.0/0.0)
`

func (q *Queries) FMathIsnan(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fMathIsnan)
	var math_isnan bool
	err := row.Scan(&math_isnan)
	return math_isnan, err
}

const fMathLog = `-- name: FMathLog :one
SELECT Math::Log(2.718281828)
`

func (q *Queries) FMathLog(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathLog)
	var math_log float64
	err := row.Scan(&math_log)
	return math_log, err
}

const fMathLog10 = `-- name: FMathLog10 :one
SELECT Math::Log10(100.0)
`

func (q *Queries) FMathLog10(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathLog10)
	var math_log10 float64
	err := row.Scan(&math_log10)
	return math_log10, err
}

const fMathLog2 = `-- name: FMathLog2 :one
SELECT Math::Log2(8.0)
`

func (q *Queries) FMathLog2(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathLog2)
	var math_log2 float64
	err := row.Scan(&math_log2)
	return math_log2, err
}

const fMathMod = `-- name: FMathMod :one
SELECT Math::Mod(10, 3)
`

func (q *Queries) FMathMod(ctx context.Context) (*int64, error) {
	row := q.db.QueryRowContext(ctx, fMathMod)
	var math_mod *int64
	err := row.Scan(&math_mod)
	return math_mod, err
}

const fMathPi = `-- name: FMathPi :one
SELECT Math::Pi()
`

// Math functions with concrete return types
func (q *Queries) FMathPi(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathPi)
	var math_pi float64
	err := row.Scan(&math_pi)
	return math_pi, err
}

const fMathPow = `-- name: FMathPow :one
SELECT Math::Pow(2.0, 3.0)
`

func (q *Queries) FMathPow(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathPow)
	var math_pow float64
	err := row.Scan(&math_pow)
	return math_pow, err
}

const fMathRem = `-- name: FMathRem :one
SELECT Math::Rem(10, 3)
`

func (q *Queries) FMathRem(ctx context.Context) (*int64, error) {
	row := q.db.QueryRowContext(ctx, fMathRem)
	var math_rem *int64
	err := row.Scan(&math_rem)
	return math_rem, err
}

const fMathRound = `-- name: FMathRound :one
SELECT Math::Round(4.6)
`

func (q *Queries) FMathRound(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathRound)
	var math_round float64
	err := row.Scan(&math_round)
	return math_round, err
}

const fMathRound2 = `-- name: FMathRound2 :one
SELECT Math::Round(4.567, 2)
`

func (q *Queries) FMathRound2(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathRound2)
	var math_round float64
	err := row.Scan(&math_round)
	return math_round, err
}

const fMathSin = `-- name: FMathSin :one
SELECT Math::Sin(0.0)
`

func (q *Queries) FMathSin(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathSin)
	var math_sin float64
	err := row.Scan(&math_sin)
	return math_sin, err
}

const fMathSqrt = `-- name: FMathSqrt :one
SELECT Math::Sqrt(16.0)
`

func (q *Queries) FMathSqrt(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathSqrt)
	var math_sqrt float64
	err := row.Scan(&math_sqrt)
	return math_sqrt, err
}

const fMathTan = `-- name: FMathTan :one
SELECT Math::Tan(0.0)
`

func (q *Queries) FMathTan(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathTan)
	var math_tan float64
	err := row.Scan(&math_tan)
	return math_tan, err
}

const fMathTrunc = `-- name: FMathTrunc :one
SELECT Math::Trunc(4.9)
`

func (q *Queries) FMathTrunc(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, fMathTrunc)
	var math_trunc float64
	err := row.Scan(&math_trunc)
	return math_trunc, err
}

const fRFind2 = `-- name: FRFind2 :one
SELECT RFind("ababa", "ba")
`

func (q *Queries) FRFind2(ctx context.Context) (uint32, error) {
	row := q.db.QueryRowContext(ctx, fRFind2)
	var rfind uint32
	err := row.Scan(&rfind)
	return rfind, err
}

const fSetBit = `-- name: FSetBit :one
SELECT SetBit("a", 0)
`

func (q *Queries) FSetBit(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, fSetBit)
	var setbit interface{}
	err := row.Scan(&setbit)
	return setbit, err
}

const fStartsWith = `-- name: FStartsWith :one
SELECT StartsWith("abcdef", "abc")
`

func (q *Queries) FStartsWith(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fStartsWith)
	var startswith bool
	err := row.Scan(&startswith)
	return startswith, err
}

const fSubstring2 = `-- name: FSubstring2 :one
SELECT Substring("abcdef", 2)
`

func (q *Queries) FSubstring2(ctx context.Context) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, fSubstring2)
	var substring []byte
	err := row.Scan(&substring)
	return substring, err
}

const fSubstring3 = `-- name: FSubstring3 :one
SELECT Substring("abcdef", 2, 3)
`

func (q *Queries) FSubstring3(ctx context.Context) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, fSubstring3)
	var substring []byte
	err := row.Scan(&substring)
	return substring, err
}

const fTestBit = `-- name: FTestBit :one
SELECT TestBit("a", 0)
`

func (q *Queries) FTestBit(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fTestBit)
	var testbit bool
	err := row.Scan(&testbit)
	return testbit, err
}

const fToBytes = `-- name: FToBytes :one
SELECT ToBytes("abc")
`

func (q *Queries) FToBytes(ctx context.Context) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, fToBytes)
	var tobytes []byte
	err := row.Scan(&tobytes)
	return tobytes, err
}

const fUnicodeFind = `-- name: FUnicodeFind :one
SELECT Unicode::Find("hello", "ll")
`

func (q *Queries) FUnicodeFind(ctx context.Context) (*uint64, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeFind)
	var unicode_find *uint64
	err := row.Scan(&unicode_find)
	return unicode_find, err
}

const fUnicodeGetlength = `-- name: FUnicodeGetlength :one
SELECT Unicode::Getlength("привет")
`

func (q *Queries) FUnicodeGetlength(ctx context.Context) (uint64, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeGetlength)
	var unicode_getlength uint64
	err := row.Scan(&unicode_getlength)
	return unicode_getlength, err
}

const fUnicodeIsalnum = `-- name: FUnicodeIsalnum :one
SELECT Unicode::Isalnum("hello123")
`

func (q *Queries) FUnicodeIsalnum(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeIsalnum)
	var unicode_isalnum bool
	err := row.Scan(&unicode_isalnum)
	return unicode_isalnum, err
}

const fUnicodeIsalpha = `-- name: FUnicodeIsalpha :one
SELECT Unicode::Isalpha("hello")
`

func (q *Queries) FUnicodeIsalpha(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeIsalpha)
	var unicode_isalpha bool
	err := row.Scan(&unicode_isalpha)
	return unicode_isalpha, err
}

const fUnicodeIsascii = `-- name: FUnicodeIsascii :one
SELECT Unicode::Isascii("hello")
`

func (q *Queries) FUnicodeIsascii(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeIsascii)
	var unicode_isascii bool
	err := row.Scan(&unicode_isascii)
	return unicode_isascii, err
}

const fUnicodeIshex = `-- name: FUnicodeIshex :one
SELECT Unicode::Ishex("FF")
`

func (q *Queries) FUnicodeIshex(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeIshex)
	var unicode_ishex bool
	err := row.Scan(&unicode_ishex)
	return unicode_ishex, err
}

const fUnicodeIslower = `-- name: FUnicodeIslower :one
SELECT Unicode::Islower("hello")
`

func (q *Queries) FUnicodeIslower(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeIslower)
	var unicode_islower bool
	err := row.Scan(&unicode_islower)
	return unicode_islower, err
}

const fUnicodeIsspace = `-- name: FUnicodeIsspace :one
SELECT Unicode::Isspace(" ")
`

func (q *Queries) FUnicodeIsspace(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeIsspace)
	var unicode_isspace bool
	err := row.Scan(&unicode_isspace)
	return unicode_isspace, err
}

const fUnicodeIsupper = `-- name: FUnicodeIsupper :one
SELECT Unicode::Isupper("HELLO")
`

func (q *Queries) FUnicodeIsupper(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeIsupper)
	var unicode_isupper bool
	err := row.Scan(&unicode_isupper)
	return unicode_isupper, err
}

const fUnicodeIsutf = `-- name: FUnicodeIsutf :one
SELECT Unicode::Isutf("hello")
`

// Unicode functions with concrete return types
func (q *Queries) FUnicodeIsutf(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeIsutf)
	var unicode_isutf bool
	err := row.Scan(&unicode_isutf)
	return unicode_isutf, err
}

const fUnicodeLevensteindistance = `-- name: FUnicodeLevensteindistance :one
SELECT Unicode::Levensteindistance("hello", "hallo")
`

func (q *Queries) FUnicodeLevensteindistance(ctx context.Context) (uint64, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeLevensteindistance)
	var unicode_levensteindistance uint64
	err := row.Scan(&unicode_levensteindistance)
	return unicode_levensteindistance, err
}

const fUnicodeNormalize = `-- name: FUnicodeNormalize :one
SELECT Unicode::Normalize("café")
`

func (q *Queries) FUnicodeNormalize(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeNormalize)
	var unicode_normalize string
	err := row.Scan(&unicode_normalize)
	return unicode_normalize, err
}

const fUnicodeReverse = `-- name: FUnicodeReverse :one
SELECT Unicode::Reverse("hello")
`

func (q *Queries) FUnicodeReverse(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeReverse)
	var unicode_reverse string
	err := row.Scan(&unicode_reverse)
	return unicode_reverse, err
}

const fUnicodeRfind = `-- name: FUnicodeRfind :one
SELECT Unicode::Rfind("hello", "l")
`

func (q *Queries) FUnicodeRfind(ctx context.Context) (*uint64, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeRfind)
	var unicode_rfind *uint64
	err := row.Scan(&unicode_rfind)
	return unicode_rfind, err
}

const fUnicodeSubstring = `-- name: FUnicodeSubstring :one
SELECT Unicode::Substring("hello", 1, 3)
`

func (q *Queries) FUnicodeSubstring(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeSubstring)
	var unicode_substring string
	err := row.Scan(&unicode_substring)
	return unicode_substring, err
}

const fUnicodeTolower = `-- name: FUnicodeTolower :one
SELECT Unicode::Tolower("HELLO")
`

func (q *Queries) FUnicodeTolower(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeTolower)
	var unicode_tolower string
	err := row.Scan(&unicode_tolower)
	return unicode_tolower, err
}

const fUnicodeTouint64 = `-- name: FUnicodeTouint64 :one
SELECT Unicode::Touint64("123")
`

func (q *Queries) FUnicodeTouint64(ctx context.Context) (uint64, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeTouint64)
	var unicode_touint64 uint64
	err := row.Scan(&unicode_touint64)
	return unicode_touint64, err
}

const fUnicodeToupper = `-- name: FUnicodeToupper :one
SELECT Unicode::Toupper("hello")
`

func (q *Queries) FUnicodeToupper(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, fUnicodeToupper)
	var unicode_toupper string
	err := row.Scan(&unicode_toupper)
	return unicode_toupper, err
}

const fVersion = `-- name: FVersion :one
SELECT Version()
`

func (q *Queries) FVersion(ctx context.Context) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, fVersion)
	var version []byte
	err := row.Scan(&version)
	return version, err
}
