// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"
	"time"
)

const getUsers = `-- name: GetUsers :many
SELECT 
    users.id,
    users.fname,
    users.lname,
    users.email,
    users.created_at,
    CASE WHEN users.email LIKE '%' || $search_term || '%' THEN 1 ELSE 0 END AS rank_email,
    CASE WHEN users.fname LIKE '%' || $search_term || '%' THEN 1 ELSE 0 END AS rank_fname,
    CASE WHEN users.lname LIKE '%' || $search_term || '%' THEN 1 ELSE 0 END AS rank_lname,
    CASE WHEN (users.email || users.fname || users.lname) LIKE '%' || $search_term || '%' THEN 1 ELSE 0 END AS similarity
FROM users
WHERE users.email LIKE '%' || $search_term || '%' 
   OR users.fname LIKE '%' || $search_term || '%' 
   OR users.lname LIKE '%' || $search_term || '%'
ORDER BY rank_email DESC, rank_lname DESC, rank_fname DESC, similarity DESC
`

type GetUsersRow struct {
	ID         int32
	Fname      string
	Lname      string
	Email      string
	CreatedAt  time.Time
	RankEmail  int32
	RankFname  int32
	RankLname  int32
	Similarity int32
}

func (q *Queries) GetUsers(ctx context.Context, searchTerm *string) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, searchTerm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Fname,
			&i.Lname,
			&i.Email,
			&i.CreatedAt,
			&i.RankEmail,
			&i.RankFname,
			&i.RankLname,
			&i.Similarity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
