// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/google/uuid"
	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const find = `-- name: Find :one
SELECT bar FROM foo WHERE baz = $baz
`

func (q *Queries) Find(ctx context.Context, baz uuid.UUID, opts ...query.ExecuteOption) (*uuid.UUID, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$baz").Uuid(baz)
	row, err := q.db.QueryRow(ctx, find,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var bar *uuid.UUID
	if err != nil {
		return bar, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&bar)
	if err != nil {
		return bar, xerrors.WithStackTrace(err)
	}
	return bar, nil
}

const list = `-- name: List :many
SELECT description, bar, baz FROM foo
`

func (q *Queries) List(ctx context.Context, opts ...query.ExecuteOption) ([]Foo, error) {
	result, err := q.db.QueryResultSet(ctx, list, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Foo
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Foo
		if err := row.Scan(&i.Description, &i.Bar, &i.Baz); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
