// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const insertMultipleValues = `-- name: InsertMultipleValues :exec
INSERT INTO foo (a, b) VALUES ($a1, $b1), ($a2, $b2)
`

type InsertMultipleValuesParams struct {
	A1 string
	B1 *int32
	A2 string
	B2 *int32
}

func (q *Queries) InsertMultipleValues(ctx context.Context, arg InsertMultipleValuesParams, opts ...query.ExecuteOption) error {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$a1").Text(arg.A1)
	parameters = parameters.Param("$b1").BeginOptional().Int32(arg.B1).EndOptional()
	parameters = parameters.Param("$a2").Text(arg.A2)
	parameters = parameters.Param("$b2").BeginOptional().Int32(arg.B2).EndOptional()
	err := q.db.Exec(ctx, insertMultipleValues,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return xerrors.WithStackTrace(err)
	}
	return nil
}

const insertValues = `-- name: InsertValues :exec
INSERT INTO foo (a, b) VALUES ($a, $b)
`

type InsertValuesParams struct {
	A string
	B *int32
}

func (q *Queries) InsertValues(ctx context.Context, arg InsertValuesParams, opts ...query.ExecuteOption) error {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$a").Text(arg.A)
	parameters = parameters.Param("$b").BeginOptional().Int32(arg.B).EndOptional()
	err := q.db.Exec(ctx, insertValues,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return xerrors.WithStackTrace(err)
	}
	return nil
}
