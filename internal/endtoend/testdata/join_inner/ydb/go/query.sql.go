// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"
)

const selectAllJoined = `-- name: SelectAllJoined :many
SELECT events.id FROM events
    INNER JOIN handled_events
       ON events.ID = handled_events.last_handled_id
WHERE handled_events.handler = $handler
`

func (q *Queries) SelectAllJoined(ctx context.Context, handler string) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, selectAllJoined, handler)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAllJoinedAlias = `-- name: SelectAllJoinedAlias :many
SELECT e.id FROM events AS e
    INNER JOIN handled_events AS he
       ON e.ID = he.last_handled_id
WHERE he.handler = $handler
`

func (q *Queries) SelectAllJoinedAlias(ctx context.Context, handler string) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, selectAllJoinedAlias, handler)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
