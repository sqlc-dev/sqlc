// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package querytest

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type PartyRank string

const (
	PartyRankEnsign     PartyRank = "ensign"
	PartyRankLieutenant PartyRank = "lieutenant"
	PartyRankCommander  PartyRank = "commander"
	PartyRankCaptain    PartyRank = "captain"
	PartyRankAdmiral    PartyRank = "admiral"
)

func (e *PartyRank) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PartyRank(s)
	case string:
		*e = PartyRank(s)
	default:
		return fmt.Errorf("unsupported scan type for PartyRank: %T", src)
	}
	return nil
}

type NullPartyRank struct {
	PartyRank PartyRank
	Valid     bool // Valid is true if PartyRank is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPartyRank) Scan(value interface{}) error {
	if value == nil {
		ns.PartyRank, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PartyRank.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPartyRank) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PartyRank), nil
}

type Llc struct {
	PartyID           uuid.UUID
	Name              string
	JoinedOn          sql.NullTime
	Rank              PartyRank
	LegalName         string
	IncorporationDate sql.NullTime
	Region            sql.NullString
}

type Organisation struct {
	PartyID   uuid.UUID
	Name      string
	JoinedOn  sql.NullTime
	Rank      PartyRank
	LegalName sql.NullString
	Region    sql.NullString
}

type Party struct {
	PartyID  uuid.UUID
	Name     string
	JoinedOn sql.NullTime
	Rank     PartyRank
	Region   sql.NullString
}

type Person struct {
	PartyID   uuid.UUID
	Name      string
	JoinedOn  sql.NullTime
	Rank      PartyRank
	FirstName string
	LastName  string
	Region    sql.NullString
}
