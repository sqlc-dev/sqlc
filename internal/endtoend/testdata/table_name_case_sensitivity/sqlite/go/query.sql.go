// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package querytest

import (
	"context"
	"database/sql"
)

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM "Authors" WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM Books WHERE id = ?
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserMixedCase = `-- name: DeleteUserMixedCase :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUserMixedCase(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserMixedCase, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name FROM "Authors" WHERE id = ?
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getBook = `-- name: GetBook :one
SELECT id, title FROM Books WHERE id = ?
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name FROM users WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUserMixedCase = `-- name: GetUserMixedCase :one
SELECT id, name FROM users WHERE id = ?
`

func (q *Queries) GetUserMixedCase(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserMixedCase, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertAuthor = `-- name: InsertAuthor :exec
INSERT INTO "Authors" (name) VALUES (?)
`

func (q *Queries) InsertAuthor(ctx context.Context, name sql.NullString) error {
	_, err := q.db.ExecContext(ctx, insertAuthor, name)
	return err
}

const insertBook = `-- name: InsertBook :exec
INSERT INTO Books (title) VALUES (?)
`

func (q *Queries) InsertBook(ctx context.Context, title sql.NullString) error {
	_, err := q.db.ExecContext(ctx, insertBook, title)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (name) VALUES (?)
`

func (q *Queries) InsertUser(ctx context.Context, name sql.NullString) error {
	_, err := q.db.ExecContext(ctx, insertUser, name)
	return err
}

const insertUserMixedCase = `-- name: InsertUserMixedCase :exec
INSERT INTO users (name) VALUES (?)
`

func (q *Queries) InsertUserMixedCase(ctx context.Context, name sql.NullString) error {
	_, err := q.db.ExecContext(ctx, insertUserMixedCase, name)
	return err
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE "Authors" SET name = ? WHERE id = ?
`

type UpdateAuthorParams struct {
	Name sql.NullString
	ID   int64
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthor, arg.Name, arg.ID)
	return err
}

const updateBook = `-- name: UpdateBook :exec
UPDATE Books SET title = ? WHERE id = ?
`

type UpdateBookParams struct {
	Title sql.NullString
	ID    int64
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook, arg.Title, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = ? WHERE id = ?
`

type UpdateUserParams struct {
	Name sql.NullString
	ID   int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.ID)
	return err
}

const updateUserMixedCase = `-- name: UpdateUserMixedCase :exec
UPDATE users SET name = ? WHERE id = ?
`

type UpdateUserMixedCaseParams struct {
	Name sql.NullString
	ID   int64
}

func (q *Queries) UpdateUserMixedCase(ctx context.Context, arg UpdateUserMixedCaseParams) error {
	_, err := q.db.ExecContext(ctx, updateUserMixedCase, arg.Name, arg.ID)
	return err
}
