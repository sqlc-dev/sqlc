// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"
)

const atParams = `-- name: AtParams :many
SELECT name FROM foo WHERE name = $slug AND CAST($filter AS Bool)
`

type AtParamsParams struct {
	Slug   string
	Filter bool
}

func (q *Queries) AtParams(ctx context.Context, arg AtParamsParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, atParams, arg.Slug, arg.Filter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const funcParams = `-- name: FuncParams :many
SELECT name FROM foo WHERE name = $slug AND CAST($filter AS Bool)
`

type FuncParamsParams struct {
	Slug   string
	Filter bool
}

func (q *Queries) FuncParams(ctx context.Context, arg FuncParamsParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, funcParams, arg.Slug, arg.Filter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAtParams = `-- name: InsertAtParams :one
INSERT INTO foo(name, bio) VALUES ($name, $bio) RETURNING name
`

type InsertAtParamsParams struct {
	Name string
	Bio  string
}

func (q *Queries) InsertAtParams(ctx context.Context, arg InsertAtParamsParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertAtParams, arg.Name, arg.Bio)
	var name string
	err := row.Scan(&name)
	return name, err
}

const insertFuncParams = `-- name: InsertFuncParams :one
INSERT INTO foo(name, bio) VALUES ($name, $bio) RETURNING name
`

type InsertFuncParamsParams struct {
	Name string
	Bio  string
}

func (q *Queries) InsertFuncParams(ctx context.Context, arg InsertFuncParamsParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertFuncParams, arg.Name, arg.Bio)
	var name string
	err := row.Scan(&name)
	return name, err
}

const update = `-- name: Update :one
UPDATE foo
SET
  name = CASE WHEN CAST($set_name AS Bool)
    THEN CAST($name AS Text)
    ELSE name
    END
RETURNING name, bio
`

type UpdateParams struct {
	SetName bool
	Name    string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Foo, error) {
	row := q.db.QueryRowContext(ctx, update, arg.SetName, arg.Name)
	var i Foo
	err := row.Scan(&i.Name, &i.Bio)
	return i, err
}
