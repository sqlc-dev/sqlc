// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package querytest

import (
	"context"
)

const retrieveAllWithDeprecation = `-- name: RetrieveAllWithDeprecation :many
select
  arn,
  name,
  aws_rds_databases.engine
from
  aws_rds_databases r
  natural join aws_rds_databases_engines
`

type RetrieveAllWithDeprecationRow struct {
	Arn    string
	Name   string
	Engine string
}

func (q *Queries) RetrieveAllWithDeprecation(ctx context.Context) ([]RetrieveAllWithDeprecationRow, error) {
	rows, err := q.db.QueryContext(ctx, retrieveAllWithDeprecation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrieveAllWithDeprecationRow
	for rows.Next() {
		var i RetrieveAllWithDeprecationRow
		if err := rows.Scan(&i.Arn, &i.Name, &i.Engine); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveAllWithDeprecationOther = `-- name: RetrieveAllWithDeprecationOther :many
;

select
  arn,
  name,
  r.engine
from
  aws_rds_databases r
  natural join aws_rds_databases_engines
`

type RetrieveAllWithDeprecationOtherRow struct {
	Arn    string
	Name   string
	Engine string
}

func (q *Queries) RetrieveAllWithDeprecationOther(ctx context.Context) ([]RetrieveAllWithDeprecationOtherRow, error) {
	rows, err := q.db.QueryContext(ctx, retrieveAllWithDeprecationOther)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrieveAllWithDeprecationOtherRow
	for rows.Next() {
		var i RetrieveAllWithDeprecationOtherRow
		if err := rows.Scan(&i.Arn, &i.Name, &i.Engine); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
