// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const testDelete = `-- name: TestDelete :exec
DELETE FROM USERS WHERE ID = ?
`

func (q *Queries) TestDelete(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, testDelete, id)
	return err
}

const testInsert = `-- name: TestInsert :exec
INSERT INTO USERS (
  ID, USERNAME
) VALUES (
  ?, ?
)
`

type TestInsertParams struct {
	ID       string
	Username string
}

func (q *Queries) TestInsert(ctx context.Context, arg TestInsertParams) error {
	_, err := q.db.ExecContext(ctx, testInsert, arg.ID, arg.Username)
	return err
}

const testSelect = `-- name: TestSelect :many
SELECT
  ID, USERNAME
FROM
  USERS
`

func (q *Queries) TestSelect(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, testSelect)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const testUpdate = `-- name: TestUpdate :exec
UPDATE USERS 
SET USERNAME = ?
WHERE ID = ?
`

type TestUpdateParams struct {
	Username string
	ID       string
}

func (q *Queries) TestUpdate(ctx context.Context, arg TestUpdateParams) error {
	_, err := q.db.ExecContext(ctx, testUpdate, arg.Username, arg.ID)
	return err
}
