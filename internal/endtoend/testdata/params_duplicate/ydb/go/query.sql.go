// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const selectUserByID = `-- name: SelectUserByID :many
SELECT first_name from
users where ($id = id OR $id = 0)
`

func (q *Queries) SelectUserByID(ctx context.Context, id int64, opts ...query.ExecuteOption) ([]*string, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$id").Int64(id)
	result, err := q.db.QueryResultSet(ctx, selectUserByID,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []*string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var first_name *string
		if err := row.Scan(&first_name); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, first_name)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const selectUserByName = `-- name: SelectUserByName :many
SELECT first_name
FROM users
WHERE first_name = $name
   OR last_name = $name
`

func (q *Queries) SelectUserByName(ctx context.Context, name *string, opts ...query.ExecuteOption) ([]*string, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$name").BeginOptional().Text(name).EndOptional()
	result, err := q.db.QueryResultSet(ctx, selectUserByName,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []*string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var first_name *string
		if err := row.Scan(&first_name); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, first_name)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const selectUserQuestion = `-- name: SelectUserQuestion :many
SELECT first_name from
users where ($question = id OR $question = 0)
`

func (q *Queries) SelectUserQuestion(ctx context.Context, question int64, opts ...query.ExecuteOption) ([]*string, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$question").Int64(question)
	result, err := q.db.QueryResultSet(ctx, selectUserQuestion,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []*string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var first_name *string
		if err := row.Scan(&first_name); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, first_name)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
