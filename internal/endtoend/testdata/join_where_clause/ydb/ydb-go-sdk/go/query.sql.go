// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const joinNoConstraints = `-- name: JoinNoConstraints :many
SELECT foo.barid
FROM foo
CROSS JOIN bar
WHERE bar.id = $bar_id AND owner = $owner
`

type JoinNoConstraintsParams struct {
	BarID int32
	Owner string
}

func (q *Queries) JoinNoConstraints(ctx context.Context, arg JoinNoConstraintsParams, opts ...query.ExecuteOption) ([]int32, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$bar_id").Int32(arg.BarID)
	parameters = parameters.Param("$owner").Text(arg.Owner)
	result, err := q.db.QueryResultSet(ctx, joinNoConstraints,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []int32
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var barid int32
		if err := row.Scan(&barid); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, barid)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const joinParamWhereClause = `-- name: JoinParamWhereClause :many
SELECT f.barid
FROM foo AS f
JOIN bar AS b ON b.id = f.barid
WHERE b.id = $bar_id AND b.owner = $owner
`

type JoinParamWhereClauseParams struct {
	BarID int32
	Owner string
}

func (q *Queries) JoinParamWhereClause(ctx context.Context, arg JoinParamWhereClauseParams, opts ...query.ExecuteOption) ([]int32, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$bar_id").Int32(arg.BarID)
	parameters = parameters.Param("$owner").Text(arg.Owner)
	result, err := q.db.QueryResultSet(ctx, joinParamWhereClause,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []int32
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var barid int32
		if err := row.Scan(&barid); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, barid)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const joinWhereClause = `-- name: JoinWhereClause :many
SELECT foo.barid
FROM foo
JOIN bar ON bar.id = barid
WHERE owner = $owner
`

func (q *Queries) JoinWhereClause(ctx context.Context, owner string, opts ...query.ExecuteOption) ([]int32, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$owner").Text(owner)
	result, err := q.db.QueryResultSet(ctx, joinWhereClause,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []int32
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var barid int32
		if err := row.Scan(&barid); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, barid)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
