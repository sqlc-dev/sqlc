// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"
)

const deleteUserAndReturnID = `-- name: DeleteUserAndReturnID :one
DELETE FROM users
  WHERE name = $name
  RETURNING id
`

func (q *Queries) DeleteUserAndReturnID(ctx context.Context, name *string) (int32, error) {
	row := q.db.QueryRowContext(ctx, deleteUserAndReturnID, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUserAndReturnUser = `-- name: DeleteUserAndReturnUser :one
DELETE FROM users
  WHERE name = $name
  RETURNING name, id
`

func (q *Queries) DeleteUserAndReturnUser(ctx context.Context, name *string) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserAndReturnUser, name)
	var i User
	err := row.Scan(&i.Name, &i.ID)
	return i, err
}

const insertUserAndReturnID = `-- name: InsertUserAndReturnID :one
INSERT INTO users (name) VALUES ($name)
  RETURNING id
`

func (q *Queries) InsertUserAndReturnID(ctx context.Context, name *string) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertUserAndReturnID, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertUserAndReturnUser = `-- name: InsertUserAndReturnUser :one
INSERT INTO users (name) VALUES ($name)
  RETURNING name, id
`

func (q *Queries) InsertUserAndReturnUser(ctx context.Context, name *string) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUserAndReturnUser, name)
	var i User
	err := row.Scan(&i.Name, &i.ID)
	return i, err
}

const updateUserAndReturnID = `-- name: UpdateUserAndReturnID :one
UPDATE users SET name = $name
  WHERE name = $name_2
  RETURNING id
`

type UpdateUserAndReturnIDParams struct {
	Name  *string
	Name2 *string
}

func (q *Queries) UpdateUserAndReturnID(ctx context.Context, arg UpdateUserAndReturnIDParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updateUserAndReturnID, arg.Name, arg.Name2)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateUserAndReturnUser = `-- name: UpdateUserAndReturnUser :one
UPDATE users SET name = $name
  WHERE name = $name_2
  RETURNING name, id
`

type UpdateUserAndReturnUserParams struct {
	Name  *string
	Name2 *string
}

func (q *Queries) UpdateUserAndReturnUser(ctx context.Context, arg UpdateUserAndReturnUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserAndReturnUser, arg.Name, arg.Name2)
	var i User
	err := row.Scan(&i.Name, &i.ID)
	return i, err
}
