// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const deleteUserAndReturnID = `-- name: DeleteUserAndReturnID :one
DELETE FROM users
  WHERE name = $name
  RETURNING id
`

func (q *Queries) DeleteUserAndReturnID(ctx context.Context, name *string, opts ...query.ExecuteOption) (int32, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$name").BeginOptional().Text(name).EndOptional()
	row, err := q.db.QueryRow(ctx, deleteUserAndReturnID,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var id int32
	if err != nil {
		return id, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&id)
	if err != nil {
		return id, xerrors.WithStackTrace(err)
	}
	return id, nil
}

const deleteUserAndReturnUser = `-- name: DeleteUserAndReturnUser :one
DELETE FROM users
  WHERE name = $name
  RETURNING name, id
`

func (q *Queries) DeleteUserAndReturnUser(ctx context.Context, name *string, opts ...query.ExecuteOption) (User, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$name").BeginOptional().Text(name).EndOptional()
	row, err := q.db.QueryRow(ctx, deleteUserAndReturnUser,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i User
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&i.Name, &i.ID)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}

const insertUserAndReturnID = `-- name: InsertUserAndReturnID :one
INSERT INTO users (name) VALUES ($name)
  RETURNING id
`

func (q *Queries) InsertUserAndReturnID(ctx context.Context, name *string, opts ...query.ExecuteOption) (int32, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$name").BeginOptional().Text(name).EndOptional()
	row, err := q.db.QueryRow(ctx, insertUserAndReturnID,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var id int32
	if err != nil {
		return id, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&id)
	if err != nil {
		return id, xerrors.WithStackTrace(err)
	}
	return id, nil
}

const insertUserAndReturnUser = `-- name: InsertUserAndReturnUser :one
INSERT INTO users (name) VALUES ($name)
  RETURNING name, id
`

func (q *Queries) InsertUserAndReturnUser(ctx context.Context, name *string, opts ...query.ExecuteOption) (User, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$name").BeginOptional().Text(name).EndOptional()
	row, err := q.db.QueryRow(ctx, insertUserAndReturnUser,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i User
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&i.Name, &i.ID)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}

const updateUserAndReturnID = `-- name: UpdateUserAndReturnID :one
UPDATE users SET name = $name
  WHERE name = $name_2
  RETURNING id
`

type UpdateUserAndReturnIDParams struct {
	Name  *string
	Name2 *string
}

func (q *Queries) UpdateUserAndReturnID(ctx context.Context, arg UpdateUserAndReturnIDParams, opts ...query.ExecuteOption) (int32, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$name").BeginOptional().Text(arg.Name).EndOptional()
	parameters = parameters.Param("$name_2").BeginOptional().Text(arg.Name2).EndOptional()
	row, err := q.db.QueryRow(ctx, updateUserAndReturnID,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var id int32
	if err != nil {
		return id, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&id)
	if err != nil {
		return id, xerrors.WithStackTrace(err)
	}
	return id, nil
}

const updateUserAndReturnUser = `-- name: UpdateUserAndReturnUser :one
UPDATE users SET name = $name
  WHERE name = $name_2
  RETURNING name, id
`

type UpdateUserAndReturnUserParams struct {
	Name  *string
	Name2 *string
}

func (q *Queries) UpdateUserAndReturnUser(ctx context.Context, arg UpdateUserAndReturnUserParams, opts ...query.ExecuteOption) (User, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$name").BeginOptional().Text(arg.Name).EndOptional()
	parameters = parameters.Param("$name_2").BeginOptional().Text(arg.Name2).EndOptional()
	row, err := q.db.QueryRow(ctx, updateUserAndReturnUser,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i User
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&i.Name, &i.ID)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}
