// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const aliasExpand = `-- name: AliasExpand :many
SELECT f.id, b.id, title
FROM foo f
JOIN bar b ON b.id = f.id
WHERE f.id = $id
`

type AliasExpandRow struct {
	ID    int32
	ID_2  int32
	Title *string
}

func (q *Queries) AliasExpand(ctx context.Context, id int32, opts ...query.ExecuteOption) ([]AliasExpandRow, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$id").Int32(id)
	result, err := q.db.QueryResultSet(ctx, aliasExpand,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []AliasExpandRow
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i AliasExpandRow
		if err := row.Scan(&i.ID, &i.ID_2, &i.Title); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const aliasJoin = `-- name: AliasJoin :many
SELECT f.id, b.title
FROM foo f
JOIN bar b ON b.id = f.id
WHERE f.id = $id
`

type AliasJoinRow struct {
	ID    int32
	Title *string
}

func (q *Queries) AliasJoin(ctx context.Context, id int32, opts ...query.ExecuteOption) ([]AliasJoinRow, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$id").Int32(id)
	result, err := q.db.QueryResultSet(ctx, aliasJoin,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []AliasJoinRow
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i AliasJoinRow
		if err := row.Scan(&i.ID, &i.Title); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
