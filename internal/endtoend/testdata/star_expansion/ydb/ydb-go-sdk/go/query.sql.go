// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const starExpansion = `-- name: StarExpansion :many
SELECT a, b, a, b, foo.a, foo.b FROM foo
`

type StarExpansionRow struct {
	A   string
	B   string
	A_2 string
	B_2 string
	A_3 string
	B_3 string
}

func (q *Queries) StarExpansion(ctx context.Context, opts ...query.ExecuteOption) ([]StarExpansionRow, error) {
	result, err := q.db.QueryResultSet(ctx, starExpansion, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []StarExpansionRow
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i StarExpansionRow
		if err := row.Scan(
			&i.A,
			&i.B,
			&i.A_2,
			&i.B_2,
			&i.A_3,
			&i.B_3,
		); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const starQuotedExpansion = `-- name: StarQuotedExpansion :many
SELECT t.a, t.b FROM foo t
`

func (q *Queries) StarQuotedExpansion(ctx context.Context, opts ...query.ExecuteOption) ([]Foo, error) {
	result, err := q.db.QueryResultSet(ctx, starQuotedExpansion, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Foo
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Foo
		if err := row.Scan(&i.A, &i.B); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
