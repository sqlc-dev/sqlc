// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const deleteBarByID = `-- name: DeleteBarByID :one
DELETE FROM bars WHERE id = $id RETURNING id, name
`

func (q *Queries) DeleteBarByID(ctx context.Context, id int32, opts ...query.ExecuteOption) (Bar, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$id").Int32(id)
	row, err := q.db.QueryRow(ctx, deleteBarByID,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i Bar
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&i.ID, &i.Name)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}

const deleteExclusionByID = `-- name: DeleteExclusionByID :one
DELETE FROM exclusions WHERE id = $id RETURNING id, name
`

func (q *Queries) DeleteExclusionByID(ctx context.Context, id int32, opts ...query.ExecuteOption) (Exclusions, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$id").Int32(id)
	row, err := q.db.QueryRow(ctx, deleteExclusionByID,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i Exclusions
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&i.ID, &i.Name)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}

const deleteMyDataByID = `-- name: DeleteMyDataByID :one
DELETE FROM my_data WHERE id = $id RETURNING id, name
`

func (q *Queries) DeleteMyDataByID(ctx context.Context, id int32, opts ...query.ExecuteOption) (MyData, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$id").Int32(id)
	row, err := q.db.QueryRow(ctx, deleteMyDataByID,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	var i MyData
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	err = row.Scan(&i.ID, &i.Name)
	if err != nil {
		return i, xerrors.WithStackTrace(err)
	}
	return i, nil
}
