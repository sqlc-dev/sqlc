// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const alsoNotEqual = `-- name: AlsoNotEqual :many
SELECT COUNT(*) <> 0 FROM bar
`

func (q *Queries) AlsoNotEqual(ctx context.Context, opts ...query.ExecuteOption) ([]bool, error) {
	result, err := q.db.QueryResultSet(ctx, alsoNotEqual, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []bool
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var column_1 bool
		if err := row.Scan(&column_1); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, column_1)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const equal = `-- name: Equal :many
SELECT COUNT(*) = 0 FROM bar
`

func (q *Queries) Equal(ctx context.Context, opts ...query.ExecuteOption) ([]bool, error) {
	result, err := q.db.QueryResultSet(ctx, equal, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []bool
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var column_1 bool
		if err := row.Scan(&column_1); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, column_1)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const greaterThan = `-- name: GreaterThan :many
SELECT COUNT(*) > 0 FROM bar
`

func (q *Queries) GreaterThan(ctx context.Context, opts ...query.ExecuteOption) ([]bool, error) {
	result, err := q.db.QueryResultSet(ctx, greaterThan, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []bool
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var column_1 bool
		if err := row.Scan(&column_1); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, column_1)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const greaterThanOrEqual = `-- name: GreaterThanOrEqual :many
SELECT COUNT(*) >= 0 FROM bar
`

func (q *Queries) GreaterThanOrEqual(ctx context.Context, opts ...query.ExecuteOption) ([]bool, error) {
	result, err := q.db.QueryResultSet(ctx, greaterThanOrEqual, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []bool
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var column_1 bool
		if err := row.Scan(&column_1); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, column_1)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const lessThan = `-- name: LessThan :many
SELECT COUNT(*) < 0 FROM bar
`

func (q *Queries) LessThan(ctx context.Context, opts ...query.ExecuteOption) ([]bool, error) {
	result, err := q.db.QueryResultSet(ctx, lessThan, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []bool
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var column_1 bool
		if err := row.Scan(&column_1); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, column_1)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const lessThanOrEqual = `-- name: LessThanOrEqual :many
SELECT COUNT(*) <= 0 FROM bar
`

func (q *Queries) LessThanOrEqual(ctx context.Context, opts ...query.ExecuteOption) ([]bool, error) {
	result, err := q.db.QueryResultSet(ctx, lessThanOrEqual, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []bool
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var column_1 bool
		if err := row.Scan(&column_1); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, column_1)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const notEqual = `-- name: NotEqual :many
SELECT COUNT(*) != 0 FROM bar
`

func (q *Queries) NotEqual(ctx context.Context, opts ...query.ExecuteOption) ([]bool, error) {
	result, err := q.db.QueryResultSet(ctx, notEqual, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []bool
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var column_1 bool
		if err := row.Scan(&column_1); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, column_1)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
