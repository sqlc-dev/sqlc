// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/google/uuid"
)

const getWorkspacesJoinTasks = `-- name: GetWorkspacesJoinTasks :many
WITH wtask AS (
    SELECT
        workspaces.id, workspaces.owner_id, workspaces.name,
        tasks.id IS NOT NULL::boolean AS has_task
    FROM workspaces
    LEFT JOIN tasks ON tasks.workspace_id = workspaces.id
)
SELECT id, owner_id, name, has_task
FROM wtask
ORDER BY CASE WHEN owner_id = $1 THEN 0 ELSE 1 END
`

type GetWorkspacesJoinTasksRow struct {
	ID      uuid.UUID
	OwnerID uuid.UUID
	Name    string
	HasTask bool
}

func (q *Queries) GetWorkspacesJoinTasks(ctx context.Context, ownerID uuid.UUID) ([]GetWorkspacesJoinTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspacesJoinTasks, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkspacesJoinTasksRow
	for rows.Next() {
		var i GetWorkspacesJoinTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.HasTask,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspacesJoinTasksRenameColumn = `-- name: GetWorkspacesJoinTasksRenameColumn :many
WITH wtask AS (
    SELECT
        workspaces.owner_id AS w_owner_id,
        workspaces.id, workspaces.owner_id, workspaces.name,
        tasks.id IS NOT NULL::boolean AS has_task
    FROM workspaces
    LEFT JOIN tasks ON tasks.workspace_id = workspaces.id
)
SELECT w_owner_id, id, owner_id, name, has_task
FROM wtask
ORDER BY CASE WHEN w_owner_id = $1 THEN 0 ELSE 1 END
`

type GetWorkspacesJoinTasksRenameColumnRow struct {
	WOwnerID uuid.UUID
	ID       uuid.UUID
	OwnerID  uuid.UUID
	Name     string
	HasTask  bool
}

func (q *Queries) GetWorkspacesJoinTasksRenameColumn(ctx context.Context, ownerID uuid.UUID) ([]GetWorkspacesJoinTasksRenameColumnRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspacesJoinTasksRenameColumn, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkspacesJoinTasksRenameColumnRow
	for rows.Next() {
		var i GetWorkspacesJoinTasksRenameColumnRow
		if err := rows.Scan(
			&i.WOwnerID,
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.HasTask,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspacesSubQueryTasks = `-- name: GetWorkspacesSubQueryTasks :many
WITH wfiltered AS (
    SELECT workspaces.id, workspaces.owner_id, workspaces.name
    FROM workspaces
    WHERE EXISTS (
        SELECT 1
        FROM tasks
        WHERE tasks.workspace_id = workspaces.id
    )
)
SELECT id, owner_id, name
FROM wfiltered
ORDER BY CASE WHEN owner_id = $1 THEN 0 ELSE 1 END
`

type GetWorkspacesSubQueryTasksRow struct {
	ID      uuid.UUID
	OwnerID uuid.UUID
	Name    string
}

func (q *Queries) GetWorkspacesSubQueryTasks(ctx context.Context, ownerID uuid.UUID) ([]GetWorkspacesSubQueryTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspacesSubQueryTasks, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkspacesSubQueryTasksRow
	for rows.Next() {
		var i GetWorkspacesSubQueryTasksRow
		if err := rows.Scan(&i.ID, &i.OwnerID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
