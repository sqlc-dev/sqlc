// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const selectUnion = `-- name: SelectUnion :many
SELECT a, b FROM foo
UNION
SELECT a, b FROM foo
`

func (q *Queries) SelectUnion(ctx context.Context, opts ...query.ExecuteOption) ([]Foo, error) {
	result, err := q.db.QueryResultSet(ctx, selectUnion, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Foo
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Foo
		if err := row.Scan(&i.A, &i.B); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const selectUnionAliased = `-- name: SelectUnionAliased :many
(SELECT a, b FROM foo)
UNION
SELECT a, b FROM foo
`

func (q *Queries) SelectUnionAliased(ctx context.Context, opts ...query.ExecuteOption) ([]Foo, error) {
	result, err := q.db.QueryResultSet(ctx, selectUnionAliased, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Foo
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Foo
		if err := row.Scan(&i.A, &i.B); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const selectUnionOther = `-- name: SelectUnionOther :many
SELECT a, b FROM foo
UNION
SELECT a, b FROM bar
`

func (q *Queries) SelectUnionOther(ctx context.Context, opts ...query.ExecuteOption) ([]Foo, error) {
	result, err := q.db.QueryResultSet(ctx, selectUnionOther, opts...)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Foo
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Foo
		if err := row.Scan(&i.A, &i.B); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const selectUnionWithLimit = `-- name: SelectUnionWithLimit :many
SELECT a, b FROM foo
UNION
SELECT a, b FROM foo
LIMIT $limit OFFSET $offset
`

type SelectUnionWithLimitParams struct {
	Offset uint64
	Limit  uint64
}

func (q *Queries) SelectUnionWithLimit(ctx context.Context, arg SelectUnionWithLimitParams, opts ...query.ExecuteOption) ([]Foo, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$offset").Uint64(arg.Offset)
	parameters = parameters.Param("$limit").Uint64(arg.Limit)
	result, err := q.db.QueryResultSet(ctx, selectUnionWithLimit,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []Foo
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var i Foo
		if err := row.Scan(&i.A, &i.B); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, i)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}
