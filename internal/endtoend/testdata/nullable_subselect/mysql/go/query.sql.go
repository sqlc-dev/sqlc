// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package querytest

import (
	"context"
	"database/sql"
)

const countRowsEmptyTable = `-- name: CountRowsEmptyTable :many
SELECT a, (SELECT count(a) FROM empty) as "count" FROM foo
`

type CountRowsEmptyTableRow struct {
	A     int32
	Count int64
}

// In MySQL, only count() returns 0 for empty table.
// https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html
func (q *Queries) CountRowsEmptyTable(ctx context.Context) ([]CountRowsEmptyTableRow, error) {
	rows, err := q.db.QueryContext(ctx, countRowsEmptyTable)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountRowsEmptyTableRow
	for rows.Next() {
		var i CountRowsEmptyTableRow
		if err := rows.Scan(&i.A, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const firstRowFromEmptyTable = `-- name: FirstRowFromEmptyTable :many
SELECT a, (SELECT a FROM empty limit 1) as "first" FROM foo
`

type FirstRowFromEmptyTableRow struct {
	A     int32
	First sql.NullInt32
}

func (q *Queries) FirstRowFromEmptyTable(ctx context.Context) ([]FirstRowFromEmptyTableRow, error) {
	rows, err := q.db.QueryContext(ctx, firstRowFromEmptyTable)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FirstRowFromEmptyTableRow
	for rows.Next() {
		var i FirstRowFromEmptyTableRow
		if err := rows.Scan(&i.A, &i.First); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const firstRowFromFooTable = `-- name: FirstRowFromFooTable :many
SELECT a, (SELECT a FROM foo limit 1) as "first" FROM foo
`

type FirstRowFromFooTableRow struct {
	A     int32
	First sql.NullInt32
}

func (q *Queries) FirstRowFromFooTable(ctx context.Context) ([]FirstRowFromFooTableRow, error) {
	rows, err := q.db.QueryContext(ctx, firstRowFromFooTable)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FirstRowFromFooTableRow
	for rows.Next() {
		var i FirstRowFromFooTableRow
		if err := rows.Scan(&i.A, &i.First); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
