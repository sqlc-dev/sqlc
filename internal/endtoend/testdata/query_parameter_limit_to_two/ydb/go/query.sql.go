// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"
)

const addNewClient = `-- name: AddNewClient :one
INSERT INTO clients (
  id, name
) VALUES (
  $id, $name
)
RETURNING id, name
`

func (q *Queries) AddNewClient(ctx context.Context, iD int32, name string) (Client, error) {
	row := q.db.QueryRowContext(ctx, addNewClient, iD, name)
	var i Client
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  name, bio, country_code, titles
) VALUES (
  $name, $bio, $country_code, $titles
)
RETURNING id, name, bio, country_code, titles
`

type CreateAuthorParams struct {
	Name        string
	Bio         *string
	CountryCode string
	Titles      *string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor,
		arg.Name,
		arg.Bio,
		arg.CountryCode,
		arg.Titles,
	)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.CountryCode,
		&i.Titles,
	)
	return i, err
}

const createAuthorOnlyTitles = `-- name: CreateAuthorOnlyTitles :one
INSERT INTO authors (name, titles) VALUES ($name, $titles) RETURNING id, name, bio, country_code, titles
`

func (q *Queries) CreateAuthorOnlyTitles(ctx context.Context, name string, titles *string) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthorOnlyTitles, name, titles)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.CountryCode,
		&i.Titles,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $id
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const deleteAuthors = `-- name: DeleteAuthors :exec
DELETE FROM authors
WHERE id IN $ids AND name = $name
`

func (q *Queries) DeleteAuthors(ctx context.Context, ids []int64, name string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthors, ids, name)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio, country_code, titles FROM authors
WHERE name = $name AND country_code = $country_code LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, name string, countryCode string) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, name, countryCode)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.CountryCode,
		&i.Titles,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio, country_code, titles FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.CountryCode,
			&i.Titles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
