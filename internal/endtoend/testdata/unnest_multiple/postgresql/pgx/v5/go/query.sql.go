// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMemories = `-- name: CreateMemories :many
INSERT INTO memories (vampire_id, memory, victim)
SELECT
    unnest($1::uuid[], $2::text[], $3::text[])
RETURNING
    id, vampire_id, memory, victim, created_at, updated_at
`

type CreateMemoriesParams struct {
	Vampires []pgtype.UUID
	Memories []string
	Victims  []string
}

func (q *Queries) CreateMemories(ctx context.Context, arg CreateMemoriesParams) ([]Memory, error) {
	rows, err := q.db.Query(ctx, createMemories, arg.Vampires, arg.Memories, arg.Victims)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Memory
	for rows.Next() {
		var i Memory
		if err := rows.Scan(
			&i.ID,
			&i.VampireID,
			&i.Memory,
			&i.Victim,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMemories = `-- name: GetMemories :many
SELECT vampires.id::uuid, vampires.memory::text, vampires.victim::text FROM unnest($1::uuid[], $2::text[], $3::text[]) AS vampires(id, memory, victim)
`

type GetMemoriesParams struct {
	Vampires []pgtype.UUID
	Memories []string
	Victims  []string
}

type GetMemoriesRow struct {
	VampiresID     pgtype.UUID
	VampiresMemory string
	VampiresVictim string
}

func (q *Queries) GetMemories(ctx context.Context, arg GetMemoriesParams) ([]GetMemoriesRow, error) {
	rows, err := q.db.Query(ctx, getMemories, arg.Vampires, arg.Memories, arg.Victims)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMemoriesRow
	for rows.Next() {
		var i GetMemoriesRow
		if err := rows.Scan(&i.VampiresID, &i.VampiresMemory, &i.VampiresVictim); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
