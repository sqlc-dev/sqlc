// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"
)

const funcNullable = `-- name: FuncNullable :many
SELECT bar FROM foo
WHERE id IN $favourites
`

func (q *Queries) FuncNullable(ctx context.Context, favourites []int32) ([]*string, error) {
	rows, err := q.db.QueryContext(ctx, funcNullable, favourites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*string
	for rows.Next() {
		var bar *string
		if err := rows.Scan(&bar); err != nil {
			return nil, err
		}
		items = append(items, bar)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const funcNullableNot = `-- name: FuncNullableNot :many
SELECT bar FROM foo
WHERE id NOT IN $favourites
`

func (q *Queries) FuncNullableNot(ctx context.Context, favourites []int32) ([]*string, error) {
	rows, err := q.db.QueryContext(ctx, funcNullableNot, favourites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*string
	for rows.Next() {
		var bar *string
		if err := rows.Scan(&bar); err != nil {
			return nil, err
		}
		items = append(items, bar)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const funcParamIdent = `-- name: FuncParamIdent :many
SELECT name FROM foo
WHERE name = $slug
  AND id IN $favourites
`

type FuncParamIdentParams struct {
	Slug       string
	Favourites []int32
}

func (q *Queries) FuncParamIdent(ctx context.Context, arg FuncParamIdentParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, funcParamIdent, arg.Slug, arg.Favourites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const funcParamSoloArg = `-- name: FuncParamSoloArg :many
SELECT name FROM foo
WHERE id IN $favourites
`

func (q *Queries) FuncParamSoloArg(ctx context.Context, favourites []int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, funcParamSoloArg, favourites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const funcParamString = `-- name: FuncParamString :many
SELECT name FROM foo
WHERE name = $slug
  AND id IN $favourites
`

type FuncParamStringParams struct {
	Slug       string
	Favourites []int32
}

func (q *Queries) FuncParamString(ctx context.Context, arg FuncParamStringParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, funcParamString, arg.Slug, arg.Favourites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sliceExec = `-- name: SliceExec :exec
UPDATE foo SET name = $slug
WHERE id IN $favourites
`

type SliceExecParams struct {
	Slug       string
	Favourites []int32
}

func (q *Queries) SliceExec(ctx context.Context, arg SliceExecParams) error {
	_, err := q.db.ExecContext(ctx, sliceExec, arg.Slug, arg.Favourites)
	return err
}
