// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package querytest

import (
	"context"

	"github.com/ydb-platform/ydb-go-sdk/v3"
	"github.com/ydb-platform/ydb-go-sdk/v3/pkg/xerrors"
	"github.com/ydb-platform/ydb-go-sdk/v3/query"
)

const funcNullable = `-- name: FuncNullable :many
SELECT bar FROM foo
WHERE id IN $favourites
`

func (q *Queries) FuncNullable(ctx context.Context, favourites []int32, opts ...query.ExecuteOption) ([]*string, error) {
	parameters := ydb.ParamsBuilder()
	var list = parameters.Param("$favourites").BeginList()
	for _, param := range favourites {
		list = list.Add().Int32(param)
	}
	parameters = list.EndList()
	result, err := q.db.QueryResultSet(ctx, funcNullable,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []*string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var bar *string
		if err := row.Scan(&bar); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, bar)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const funcNullableNot = `-- name: FuncNullableNot :many
SELECT bar FROM foo
WHERE id NOT IN $favourites
`

func (q *Queries) FuncNullableNot(ctx context.Context, favourites []int32, opts ...query.ExecuteOption) ([]*string, error) {
	parameters := ydb.ParamsBuilder()
	var list = parameters.Param("$favourites").BeginList()
	for _, param := range favourites {
		list = list.Add().Int32(param)
	}
	parameters = list.EndList()
	result, err := q.db.QueryResultSet(ctx, funcNullableNot,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []*string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var bar *string
		if err := row.Scan(&bar); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, bar)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const funcParamIdent = `-- name: FuncParamIdent :many
SELECT name FROM foo
WHERE name = $slug
  AND id IN $favourites
`

type FuncParamIdentParams struct {
	Slug       string
	Favourites []int32
}

func (q *Queries) FuncParamIdent(ctx context.Context, arg FuncParamIdentParams, opts ...query.ExecuteOption) ([]string, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$slug").Text(arg.Slug)
	var list = parameters.Param("$favourites").BeginList()
	for _, param := range arg.Favourites {
		list = list.Add().Int32(param)
	}
	parameters = list.EndList()
	result, err := q.db.QueryResultSet(ctx, funcParamIdent,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var name string
		if err := row.Scan(&name); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, name)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const funcParamSoloArg = `-- name: FuncParamSoloArg :many
SELECT name FROM foo
WHERE id IN $favourites
`

func (q *Queries) FuncParamSoloArg(ctx context.Context, favourites []int32, opts ...query.ExecuteOption) ([]string, error) {
	parameters := ydb.ParamsBuilder()
	var list = parameters.Param("$favourites").BeginList()
	for _, param := range favourites {
		list = list.Add().Int32(param)
	}
	parameters = list.EndList()
	result, err := q.db.QueryResultSet(ctx, funcParamSoloArg,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var name string
		if err := row.Scan(&name); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, name)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const funcParamString = `-- name: FuncParamString :many
SELECT name FROM foo
WHERE name = $slug
  AND id IN $favourites
`

type FuncParamStringParams struct {
	Slug       string
	Favourites []int32
}

func (q *Queries) FuncParamString(ctx context.Context, arg FuncParamStringParams, opts ...query.ExecuteOption) ([]string, error) {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$slug").Text(arg.Slug)
	var list = parameters.Param("$favourites").BeginList()
	for _, param := range arg.Favourites {
		list = list.Add().Int32(param)
	}
	parameters = list.EndList()
	result, err := q.db.QueryResultSet(ctx, funcParamString,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	var items []string
	for row, err := range result.Rows(ctx) {
		if err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		var name string
		if err := row.Scan(&name); err != nil {
			return nil, xerrors.WithStackTrace(err)
		}
		items = append(items, name)
	}
	if err := result.Close(ctx); err != nil {
		return nil, xerrors.WithStackTrace(err)
	}
	return items, nil
}

const sliceExec = `-- name: SliceExec :exec
UPDATE foo SET name = $slug
WHERE id IN $favourites
`

type SliceExecParams struct {
	Slug       string
	Favourites []int32
}

func (q *Queries) SliceExec(ctx context.Context, arg SliceExecParams, opts ...query.ExecuteOption) error {
	parameters := ydb.ParamsBuilder()
	parameters = parameters.Param("$slug").Text(arg.Slug)
	var list = parameters.Param("$favourites").BeginList()
	for _, param := range arg.Favourites {
		list = list.Add().Int32(param)
	}
	parameters = list.EndList()
	err := q.db.Exec(ctx, sliceExec,
		append(opts, query.WithParameters(parameters.Build()))...,
	)
	if err != nil {
		return xerrors.WithStackTrace(err)
	}
	return nil
}
